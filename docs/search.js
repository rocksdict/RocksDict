window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "speedict", "modulename": "speedict", "kind": "module", "doc": "<h2 id=\"abstract\">Abstract</h2>\n\n<p>This package enables users to store, query, and delete\na large number of key-value pairs on disk.</p>\n\n<p>This is especially useful when the data cannot fit into RAM.\nIf you have hundreds of GBs or many TBs of key-value data to store\nand query from, this is the package for you.</p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p>This package is built for macOS (x86/arm), Windows 64/32, and Linux x86/arm.\nIt can be installed from pypi with <code>pip install speedict</code>.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Below is a code example that shows how to do the following:</p>\n\n<ul>\n<li>Create Rdict</li>\n<li>Store something on disk</li>\n<li>Close Rdict</li>\n<li>Open Rdict again</li>\n<li>Check Rdict elements</li>\n<li>Iterate from Rdict</li>\n<li>Batch get</li>\n<li>Delete storage</li>\n</ul>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options\n\npath = str(\"./test_dict\")\n\n# create a Rdict with default options at `path`\ndb = Rdict(path)\n\n# storing numbers\ndb[1.0] = 1\ndb[1] = 1.0\ndb[\"huge integer\"] = 2343546543243564534233536434567543\ndb[\"good\"] = True\ndb[\"bad\"] = False\ndb[\"bytes\"] = b\"bytes\"\ndb[\"this is a list\"] = [1, 2, 3]\ndb[\"store a dict\"] = {0: 1}\n\n# for example numpy array\nimport numpy as np\nimport pandas as pd\ndb[b\"numpy\"] = np.array([1, 2, 3])\ndb[\"a table\"] = pd.DataFrame({\"a\": [1, 2], \"b\": [2, 1]})\n\n# close Rdict\ndb.close()\n\n# reopen Rdict from disk\ndb = Rdict(path)\nassert db[1.0] == 1\nassert db[1] == 1.0\nassert db[\"huge integer\"] == 2343546543243564534233536434567543\nassert db[\"good\"] == True\nassert db[\"bad\"] == False\nassert db[\"bytes\"] == b\"bytes\"\nassert db[\"this is a list\"] == [1, 2, 3]\nassert db[\"store a dict\"] == {0: 1}\nassert np.all(db[b\"numpy\"] == np.array([1, 2, 3]))\nassert np.all(db[\"a table\"] == pd.DataFrame({\"a\": [1, 2], \"b\": [2, 1]}))\n\n# iterate through all elements\nfor k, v in db.items():\n    print(f\"{k} -&gt; {v}\")\n\n# batch get:\nprint(db[[\"good\", \"bad\", 1.0]])\n# [True, False, 1]\n\n# delete Rdict from dict\ndb.close()\nRdict.destroy(path)\n</code></pre>\n</blockquote>\n\n<p>Supported types:</p>\n\n<ul>\n<li>key: <code>int, float, bool, str, bytes</code></li>\n<li>value: <code>int, float, bool, str, bytes</code> and anything that\nsupports <code>pickle</code>.</li>\n</ul>\n"}, {"fullname": "speedict.Rdict", "modulename": "speedict", "qualname": "Rdict", "kind": "class", "doc": "<p>A persistent on-disk dictionary. Supports string, int, float, bytes as key, values.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict\n\ndb = Rdict(\"./test_dir\")\ndb[0] = 1\n\ndb = None\ndb = Rdict(\"./test_dir\")\nassert(db[0] == 1)\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path to the database</li>\n<li><strong>options (Options):</strong>  Options object</li>\n<li><strong>column_families (dict):</strong>  (name, options) pairs, these <code>Options</code>\nmust have the same <code>raw_mode</code> argument as the main <code>Options</code>.\nA column family called 'default' is always created.</li>\n<li><strong>access_type (AccessType):</strong>  there are four access types:\nReadWrite, ReadOnly, WithTTL, and Secondary, use\nAccessType class to create.</li>\n</ul>\n"}, {"fullname": "speedict.Rdict.__init__", "modulename": "speedict", "qualname": "Rdict.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.Rdict.set_dumps", "modulename": "speedict", "qualname": "Rdict.set_dumps", "kind": "function", "doc": "<p>set custom dumps function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">dumps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.set_loads", "modulename": "speedict", "qualname": "Rdict.set_loads", "kind": "function", "doc": "<p>set custom loads function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">loads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.set_write_options", "modulename": "speedict", "qualname": "Rdict.set_write_options", "kind": "function", "doc": "<p>Optionally disable WAL or sync for this write.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, WriteBatch, WriteOptions\n\npath = \"_path_for_rocksdb_storageY1\"\ndb = Rdict(path)\n\n# set write options\nwrite_options = WriteOptions()\nwrite_options.set_sync(False)\nwrite_options.disable_wal(True)\ndb.set_write_options(write_options)\n\n# write to db\ndb[\"my key\"] = \"my value\"\ndb[\"key2\"] = \"value2\"\ndb[\"key3\"] = \"value3\"\n\n# remove db\ndel db\nRdict.destroy(path)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">write_opt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.set_read_options", "modulename": "speedict", "qualname": "Rdict.set_read_options", "kind": "function", "doc": "<p>Configure Read Options for all the get operations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.get", "modulename": "speedict", "qualname": "Rdict.get", "kind": "function", "doc": "<p>Get value from key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  the key or list of keys.</li>\n<li><strong>default:</strong>  the default value to return if key not found.</li>\n<li><strong>read_opt:</strong>  override preset read options\n(or use Rdict.set_read_options to preset a read options used by default).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None or default value if the key does not exist.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.put", "modulename": "speedict", "qualname": "Rdict.put", "kind": "function", "doc": "<p>Insert key value into database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  the key.</li>\n<li><strong>value:</strong>  the value.</li>\n<li><strong>write_opt:</strong>  override preset write options\n(or use Rdict.set_write_options to preset a write options used by default).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">write_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.key_may_exist", "modulename": "speedict", "qualname": "Rdict.key_may_exist", "kind": "function", "doc": "<p>Check if a key may exist without doing any IO.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>If the key definitely does not exist in the database,\n  then this method returns False, else True.\n  If the caller wants to obtain value when the key is found in memory,\n  fetch should be set to True.\n  This check is potentially lighter-weight than invoking DB::get().\n  One way to make this lighter weight is to avoid doing any IOs.</p>\n  \n  <p>The API follows the following principle:</p>\n  \n  <ul>\n  <li>True, and value found =&gt; the key must exist.</li>\n  <li>True =&gt; the key may or may not exist.</li>\n  <li>False =&gt; the key definitely does not exist.</li>\n  </ul>\n  \n  <p>Flip it around:</p>\n  \n  <ul>\n  <li>key exists =&gt; must return True, but value may or may not be found.</li>\n  <li>key doesn't exists =&gt; might still return True.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  Key to check</li>\n<li><strong>read_opt:</strong>  ReadOptions</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>if <code>fetch = False</code>,\n      returning True implies that the key may exist.\n      returning False implies that the key definitely does not exist.\n  if <code>fetch = True</code>,\n      returning (True, value) implies that the key is found and definitely exist.\n      returning (False, None) implies that the key definitely does not exist.\n      returning (True,  None) implies that the key may exist.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">fetch</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.delete", "modulename": "speedict", "qualname": "Rdict.delete", "kind": "function", "doc": "<p>Delete entry from the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  the key.</li>\n<li><strong>write_opt:</strong>  override preset write options\n(or use Rdict.set_write_options to preset a write options used by default).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">write_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.iter", "modulename": "speedict", "qualname": "Rdict.iter", "kind": "function", "doc": "<p>Reversible for iterating over keys and values.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, ReadOptions\n\npath = \"_path_for_rocksdb_storage5\"\ndb = Rdict(path)\n\nfor i in range(50):\n    db[i] = i ** 2\n\niter = db.iter()\n\niter.seek_to_first()\n\nj = 0\nwhile iter.valid():\n    assert iter.key() == j\n    assert iter.value() == j ** 2\n    print(f\"{iter.key()} {iter.value()}\")\n    iter.next()\n    j += 1\n\niter.seek_to_first();\nassert iter.key() == 0\nassert iter.value() == 0\nprint(f\"{iter.key()} {iter.value()}\")\n\niter.seek(25)\nassert iter.key() == 25\nassert iter.value() == 625\nprint(f\"{iter.key()} {iter.value()}\")\n\ndel iter, db\nRdict.destroy(path)\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>read_opt:</strong>  ReadOptions</li>\n</ul>\n\n<p>Returns: Reversible</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.items", "modulename": "speedict", "qualname": "Rdict.items", "kind": "function", "doc": "<p>Iterate through all keys and values pairs.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>for k, v in db.items():\n    print(f\"{k} -&gt; {v}\")\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.keys", "modulename": "speedict", "qualname": "Rdict.keys", "kind": "function", "doc": "<p>Iterate through all keys</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>all_keys = [k for k in db.keys()]\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.values", "modulename": "speedict", "qualname": "Rdict.values", "kind": "function", "doc": "<p>Iterate through all values.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>all_keys = [v for v in db.values()]\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions, must have the same <code>raw_mode</code> argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.flush", "modulename": "speedict", "qualname": "Rdict.flush", "kind": "function", "doc": "<p>Manually flush the current column family.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>Manually call mem-table flush.\n  It is recommended to call flush() or close() before\n  stopping the python program, to ensure that all written\n  key-value pairs have been flushed to the disk.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wait (bool):</strong>  whether to wait for the flush to finish.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.flush_wal", "modulename": "speedict", "qualname": "Rdict.flush_wal", "kind": "function", "doc": "<p>Flushes the WAL buffer. If <code>sync</code> is set to <code>true</code>, also syncs\nthe data to disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">sync</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.create_column_family", "modulename": "speedict", "qualname": "Rdict.create_column_family", "kind": "function", "doc": "<p>Creates column family with given name and options.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of this column family</li>\n<li><strong>options:</strong>  Rdict Options for this column family</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>the newly created column family</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.drop_column_family", "modulename": "speedict", "qualname": "Rdict.drop_column_family", "kind": "function", "doc": "<p>Drops the column family with the given name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.get_column_family", "modulename": "speedict", "qualname": "Rdict.get_column_family", "kind": "function", "doc": "<p>Get a column family Rdict</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of this column family</li>\n<li><strong>options:</strong>  Rdict Options for this column family</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>the column family Rdict of this name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.get_column_family_handle", "modulename": "speedict", "qualname": "Rdict.get_column_family_handle", "kind": "function", "doc": "<p>Use this method to obtain a ColumnFamily instance, which can be used in WriteBatch.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>wb = WriteBatch()\nfor i in range(100):\n    wb.put(i, i**2, db.get_column_family_handle(cf_name_1))\ndb.write(wb)\n\nwb = WriteBatch()\nwb.set_default_column_family(db.get_column_family_handle(cf_name_2))\nfor i in range(100, 200):\n    wb[i] = i**2\ndb.write(wb)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.snapshot", "modulename": "speedict", "qualname": "Rdict.snapshot", "kind": "function", "doc": "<p>A snapshot of the current column family.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict\n\ndb = Rdict(\"tmp\")\nfor i in range(100):\n    db[i] = i\n\n# take a snapshot\nsnapshot = db.snapshot()\n\nfor i in range(90):\n    del db[i]\n\n# 0-89 are no longer in db\nfor k, v in db.items():\n    print(f\"{k} -&gt; {v}\")\n\n# but they are still in the snapshot\nfor i in range(100):\n    assert snapshot[i] == i\n\n# drop the snapshot\ndel snapshot, db\n\nRdict.destroy(\"tmp\")\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.ingest_external_file", "modulename": "speedict", "qualname": "Rdict.ingest_external_file", "kind": "function", "doc": "<p>Loads a list of external SST files created with SstFileWriter\ninto the current column family.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>paths:</strong>  a list a paths</li>\n<li><strong>opts:</strong>  IngestExternalFileOptionsPy instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">paths</span>, </span><span class=\"param\"><span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.try_catch_up_with_primary", "modulename": "speedict", "qualname": "Rdict.try_catch_up_with_primary", "kind": "function", "doc": "<p>Tries to catch up with the primary by reading as much as possible from the\nlog files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.cancel_all_background", "modulename": "speedict", "qualname": "Rdict.cancel_all_background", "kind": "function", "doc": "<p>Request stopping background work, if wait is true wait until it's done.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">wait</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.write", "modulename": "speedict", "qualname": "Rdict.write", "kind": "function", "doc": "<p>WriteBatch</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>This WriteBatch does not write to the current column family.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>write_batch:</strong>  WriteBatch instance. This instance will be consumed.</li>\n<li><strong>write_opt:</strong>  use default value if not provided.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">write_batch</span>, </span><span class=\"param\"><span class=\"n\">write_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.delete_range", "modulename": "speedict", "qualname": "Rdict.delete_range", "kind": "function", "doc": "<p>Removes the database entries in the range <code>[\"from\", \"to\")</code> of the current column family.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>begin:</strong>  included</li>\n<li><strong>end:</strong>  excluded</li>\n<li><strong>write_opt:</strong>  WriteOptions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">begin</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">write_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.close", "modulename": "speedict", "qualname": "Rdict.close", "kind": "function", "doc": "<p>Flush memory to disk, and drop the current column family.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>Calling <code>db.close()</code> is nearly equivalent to first calling\n  <code>db.flush()</code> and then <code>del db</code>. However, <code>db.close()</code> does\n  not guarantee the underlying RocksDB to be actually closed.\n  Other Column Family <code>Rdict</code> instances, <code>ColumnFamily</code>\n  (cf handle) instances, iterator instances such as<code>RdictIter</code>,\n  <code>RdictItems</code>, <code>RdictKeys</code>, <code>RdictValues</code> can all keep RocksDB\n  alive. <code>del</code> all associated instances mentioned above\n  to actually shut down RocksDB.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.path", "modulename": "speedict", "qualname": "Rdict.path", "kind": "function", "doc": "<p>Return current database path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.compact_range", "modulename": "speedict", "qualname": "Rdict.compact_range", "kind": "function", "doc": "<p>Runs a manual compaction on the Range of keys given for the current Column Family.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">begin</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">compact_opt</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.set_options", "modulename": "speedict", "qualname": "Rdict.set_options", "kind": "function", "doc": "<p>Set options for the current column family.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.property_value", "modulename": "speedict", "qualname": "Rdict.property_value", "kind": "function", "doc": "<p>Retrieves a RocksDB property by name, for the current column family.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.property_int_value", "modulename": "speedict", "qualname": "Rdict.property_int_value", "kind": "function", "doc": "<p>Retrieves a RocksDB property and casts it to an integer\n(for the current column family).</p>\n\n<p>Full list of properties that return int values could be find\n<a href=\"https://github.com/facebook/rocksdb/blob/08809f5e6cd9cc4bc3958dd4d59457ae78c76660/include/rocksdb/db.h#L654-L689\">here</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.latest_sequence_number", "modulename": "speedict", "qualname": "Rdict.latest_sequence_number", "kind": "function", "doc": "<p>The sequence number of the most recent transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.live_files", "modulename": "speedict", "qualname": "Rdict.live_files", "kind": "function", "doc": "<p>Returns a list of all table files with their level, start key and end key</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.destroy", "modulename": "speedict", "qualname": "Rdict.destroy", "kind": "function", "doc": "<p>Delete the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path to this database</li>\n<li><strong>options (speedict.Options):</strong>  Rocksdb options object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.repair", "modulename": "speedict", "qualname": "Rdict.repair", "kind": "function", "doc": "<p>Repair the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path to this database</li>\n<li><strong>options (speedict.Options):</strong>  Rocksdb options object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Rdict.list_cf", "modulename": "speedict", "qualname": "Rdict.list_cf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch", "modulename": "speedict", "qualname": "WriteBatch", "kind": "class", "doc": "<p>WriteBatch class. Use db.write() to ingest WriteBatch.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>A WriteBatch instance can only be ingested once,\n  otherwise an Exception will be raised.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>raw_mode (bool):</strong>  make sure that this is consistent with the Rdict.</li>\n</ul>\n"}, {"fullname": "speedict.WriteBatch.__init__", "modulename": "speedict", "qualname": "WriteBatch.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.WriteBatch.set_dumps", "modulename": "speedict", "qualname": "WriteBatch.set_dumps", "kind": "function", "doc": "<p>change to a custom dumps function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">dumps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.set_default_column_family", "modulename": "speedict", "qualname": "WriteBatch.set_default_column_family", "kind": "function", "doc": "<p>Set the default item for <code>a[i] = j</code> and <code>del a[i]</code> syntax.</p>\n\n<p>You can also use <code>put(key, value, column_family)</code> to explicitly choose column family.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>- column_family (ColumnFamily | None):</strong>  column family descriptor or None (for default family).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">column_family</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.len", "modulename": "speedict", "qualname": "WriteBatch.len", "kind": "function", "doc": "<p>length of the batch</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.size_in_bytes", "modulename": "speedict", "qualname": "WriteBatch.size_in_bytes", "kind": "function", "doc": "<p>Return WriteBatch serialized size (in bytes).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.is_empty", "modulename": "speedict", "qualname": "WriteBatch.is_empty", "kind": "function", "doc": "<p>Check whether the batch is empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.put", "modulename": "speedict", "qualname": "WriteBatch.put", "kind": "function", "doc": "<p>Insert a value into the database under the given key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column_family:</strong>  override the default column family set by set_default_column_family</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">column_family</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.delete", "modulename": "speedict", "qualname": "WriteBatch.delete", "kind": "function", "doc": "<p>Removes the database entry for key. Does nothing if the key was not found.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column_family:</strong>  override the default column family set by set_default_column_family</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">column_family</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.delete_range", "modulename": "speedict", "qualname": "WriteBatch.delete_range", "kind": "function", "doc": "<p>Remove database entries in column family from start key to end key.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>Removes the database entries in the range [\"begin_key\", \"end_key\"), i.e.,\n  including \"begin_key\" and excluding \"end_key\". It is not an error if no\n  keys exist in the range [\"begin_key\", \"end_key\").</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>begin:</strong>  begin key</li>\n<li><strong>end:</strong>  end key</li>\n<li><strong>column_family:</strong>  override the default column family set by set_default_column_family</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">begin</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">column_family</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteBatch.clear", "modulename": "speedict", "qualname": "WriteBatch.clear", "kind": "function", "doc": "<p>Clear all updates buffered in this batch.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SstFileWriter", "modulename": "speedict", "qualname": "SstFileWriter", "kind": "class", "doc": "<p>SstFileWriter is used to create sst files that can be added to database later\nAll keys in files generated by SstFileWriter will have sequence number = 0.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>options:</strong>  this options must have the same <code>raw_mode</code> as the Rdict DB.</li>\n</ul>\n"}, {"fullname": "speedict.SstFileWriter.__init__", "modulename": "speedict", "qualname": "SstFileWriter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.SstFileWriter.set_dumps", "modulename": "speedict", "qualname": "SstFileWriter.set_dumps", "kind": "function", "doc": "<p>set custom dumps function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">dumps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SstFileWriter.open", "modulename": "speedict", "qualname": "SstFileWriter.open", "kind": "function", "doc": "<p>Prepare SstFileWriter to write into file located at \"file_path\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SstFileWriter.finish", "modulename": "speedict", "qualname": "SstFileWriter.finish", "kind": "function", "doc": "<p>Finalize writing to sst file and close file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SstFileWriter.file_size", "modulename": "speedict", "qualname": "SstFileWriter.file_size", "kind": "function", "doc": "<p>returns the current file size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.AccessType", "modulename": "speedict", "qualname": "AccessType", "kind": "class", "doc": "<p>Define DB Access Types.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There are four access types:</p>\n  \n  <ul>\n  <li>ReadWrite: default value</li>\n  <li>ReadOnly</li>\n  <li>WithTTL</li>\n  <li>Secondary</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, AccessType\n\n# open with 24 hours ttl\ndb = Rdict(\"./main_path\", access_type = AccessType.with_ttl(24 * 3600))\n\n# open as read_only\ndb = Rdict(\"./main_path\", access_type = AccessType.read_only())\n\n# open as secondary\ndb = Rdict(\"./main_path\", access_type = AccessType.secondary(\"./secondary_path\"))\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.AccessType.__init__", "modulename": "speedict", "qualname": "AccessType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.AccessType.read_write", "modulename": "speedict", "qualname": "AccessType.read_write", "kind": "function", "doc": "<p>Define DB Access Types.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There are four access types:</p>\n  \n  <ul>\n  <li>ReadWrite: default value</li>\n  <li>ReadOnly</li>\n  <li>WithTTL</li>\n  <li>Secondary</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, AccessType\n\n# open with 24 hours ttl\ndb = Rdict(\"./main_path\", access_type = AccessType.with_ttl(24 * 3600))\n\n# open as read_only\ndb = Rdict(\"./main_path\", access_type = AccessType.read_only())\n\n# open as secondary\ndb = Rdict(\"./main_path\", access_type = AccessType.secondary(\"./secondary_path\"))\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.AccessType.read_only", "modulename": "speedict", "qualname": "AccessType.read_only", "kind": "function", "doc": "<p>Define DB Access Types.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There are four access types:</p>\n  \n  <ul>\n  <li>ReadWrite: default value</li>\n  <li>ReadOnly</li>\n  <li>WithTTL</li>\n  <li>Secondary</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, AccessType\n\n# open with 24 hours ttl\ndb = Rdict(\"./main_path\", access_type = AccessType.with_ttl(24 * 3600))\n\n# open as read_only\ndb = Rdict(\"./main_path\", access_type = AccessType.read_only())\n\n# open as secondary\ndb = Rdict(\"./main_path\", access_type = AccessType.secondary(\"./secondary_path\"))\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_if_log_file_exist</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.AccessType.secondary", "modulename": "speedict", "qualname": "AccessType.secondary", "kind": "function", "doc": "<p>Define DB Access Types.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There are four access types:</p>\n  \n  <ul>\n  <li>ReadWrite: default value</li>\n  <li>ReadOnly</li>\n  <li>WithTTL</li>\n  <li>Secondary</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, AccessType\n\n# open with 24 hours ttl\ndb = Rdict(\"./main_path\", access_type = AccessType.with_ttl(24 * 3600))\n\n# open as read_only\ndb = Rdict(\"./main_path\", access_type = AccessType.read_only())\n\n# open as secondary\ndb = Rdict(\"./main_path\", access_type = AccessType.secondary(\"./secondary_path\"))\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">secondary_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.AccessType.with_ttl", "modulename": "speedict", "qualname": "AccessType.with_ttl", "kind": "function", "doc": "<p>Define DB Access Types.</p>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There are four access types:</p>\n  \n  <ul>\n  <li>ReadWrite: default value</li>\n  <li>ReadOnly</li>\n  <li>WithTTL</li>\n  <li>Secondary</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, AccessType\n\n# open with 24 hours ttl\ndb = Rdict(\"./main_path\", access_type = AccessType.with_ttl(24 * 3600))\n\n# open as read_only\ndb = Rdict(\"./main_path\", access_type = AccessType.read_only())\n\n# open as secondary\ndb = Rdict(\"./main_path\", access_type = AccessType.secondary(\"./secondary_path\"))\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.WriteOptions", "modulename": "speedict", "qualname": "WriteOptions", "kind": "class", "doc": "<p>Optionally disable WAL or sync for this write.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, WriteBatch, WriteOptions\n\npath = \"_path_for_rocksdb_storageY1\"\ndb = Rdict(path, Options())\n\n# set write options\nwrite_options = WriteOptions()\nwrite_options.set_sync(false)\nwrite_options.disable_wal(true)\ndb.set_write_options(write_options)\n\n# write to db\ndb[\"my key\"] = \"my value\"\ndb[\"key2\"] = \"value2\"\ndb[\"key3\"] = \"value3\"\n\n# remove db\ndel db\nRdict.destroy(path, Options())\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.WriteOptions.__init__", "modulename": "speedict", "qualname": "WriteOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.WriteOptions.disable_wal", "modulename": "speedict", "qualname": "WriteOptions.disable_wal", "kind": "variable", "doc": "<p>Sets whether WAL should be active or not.\nIf true, writes will not first go to the write ahead log,\nand the write may got lost after a crash.</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.WriteOptions.ignore_missing_column_families", "modulename": "speedict", "qualname": "WriteOptions.ignore_missing_column_families", "kind": "variable", "doc": "<p>If true and if user is trying to write to column families that don't exist (they were dropped),\nignore the write (don't return an error). If there are multiple writes in a WriteBatch,\nother writes will succeed.</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.WriteOptions.sync", "modulename": "speedict", "qualname": "WriteOptions.sync", "kind": "variable", "doc": "<p>Sets the sync mode. If true, the write will be flushed\nfrom the operating system buffer cache before the write is considered complete.\nIf this flag is true, writes will be slower.</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.WriteOptions.low_pri", "modulename": "speedict", "qualname": "WriteOptions.low_pri", "kind": "variable", "doc": "<p>If true, this write request is of lower priority if compaction is\nbehind. In this case, no_slowdown = true, the request will be cancelled\nimmediately with Status::Incomplete() returned. Otherwise, it will be\nslowed down. The slowdown value is determined by RocksDB to guarantee\nit introduces minimum impacts to high priority writes.</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.WriteOptions.memtable_insert_hint_per_batch", "modulename": "speedict", "qualname": "WriteOptions.memtable_insert_hint_per_batch", "kind": "variable", "doc": "<p>If true, writebatch will maintain the last insert positions of each\nmemtable as hints in concurrent write. It can improve write performance\nin concurrent writes if keys in one writebatch are sequential. In\nnon-concurrent writes (when concurrent_memtable_writes is false) this\noption will be ignored.</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.WriteOptions.no_slowdown", "modulename": "speedict", "qualname": "WriteOptions.no_slowdown", "kind": "variable", "doc": "<p>If true and we need to wait or sleep for the write request, fails\nimmediately with Status::Incomplete().</p>\n\n<p>Default: false</p>\n"}, {"fullname": "speedict.Snapshot", "modulename": "speedict", "qualname": "Snapshot", "kind": "class", "doc": "<p>A consistent view of the database at the point of creation.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict\n\ndb = Rdict(\"tmp\")\nfor i in range(100):\n    db[i] = i\n\n# take a snapshot\nsnapshot = db.snapshot()\n\nfor i in range(90):\n    del db[i]\n\n# 0-89 are no longer in db\nfor k, v in db.items():\n    print(f\"{k} -&gt; {v}\")\n\n# but they are still in the snapshot\nfor i in range(100):\n    assert snapshot[i] == i\n\n# drop the snapshot\ndel snapshot, db\n\nRdict.destroy(\"tmp\")\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.Snapshot.__init__", "modulename": "speedict", "qualname": "Snapshot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.Snapshot.iter", "modulename": "speedict", "qualname": "Snapshot.iter", "kind": "function", "doc": "<p>Creates an iterator over the data in this snapshot under the given column family, using\nthe default read options.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>read_opt:</strong>  ReadOptions, must have the same <code>raw_mode</code> argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Snapshot.items", "modulename": "speedict", "qualname": "Snapshot.items", "kind": "function", "doc": "<p>Iterate through all keys and values pairs.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions, must have the same <code>raw_mode</code> argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Snapshot.keys", "modulename": "speedict", "qualname": "Snapshot.keys", "kind": "function", "doc": "<p>Iterate through all keys.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions, must have the same <code>raw_mode</code> argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Snapshot.values", "modulename": "speedict", "qualname": "Snapshot.values", "kind": "function", "doc": "<p>Iterate through all values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>backwards:</strong>  iteration direction, forward if <code>False</code>.</li>\n<li><strong>from_key:</strong>  iterate from key, first seek to this key\nor the nearest next key for iteration\n(depending on iteration direction).</li>\n<li><strong>read_opt:</strong>  ReadOptions, must have the same <code>raw_mode</code> argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">backwards</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">from_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">read_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter", "modulename": "speedict", "qualname": "RdictIter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.RdictIter.__init__", "modulename": "speedict", "qualname": "RdictIter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.RdictIter.valid", "modulename": "speedict", "qualname": "RdictIter.valid", "kind": "function", "doc": "<p>Returns <code>true</code> if the iterator is valid. An iterator is invalidated when\nit reaches the end of its defined range, or when it encounters an error.</p>\n\n<p>To check whether the iterator encountered an error after <code>valid</code> has\nreturned <code>false</code>, use the <a href=\"DBRawIteratorWithThreadMode::status\"><code>status</code></a> method. <code>status</code> will never\nreturn an error when <code>valid</code> is <code>true</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.status", "modulename": "speedict", "qualname": "RdictIter.status", "kind": "function", "doc": "<p>Returns an error <code>Result</code> if the iterator has encountered an error\nduring operation. When an error is encountered, the iterator is\ninvalidated and <a href=\"DBRawIteratorWithThreadMode::valid\"><code>valid</code></a> will return <code>false</code> when called.</p>\n\n<p>Performing a seek will discard the current status.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.seek_to_first", "modulename": "speedict", "qualname": "RdictIter.seek_to_first", "kind": "function", "doc": "<p>Seeks to the first key in the database.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, ReadOptions\n\npath = \"_path_for_rocksdb_storage5\"\ndb = Rdict(path, Options())\niter = db.iter(ReadOptions())\n\n# Iterate all keys from the start in lexicographic order\niter.seek_to_first()\n\nwhile iter.valid():\n    print(f\"{iter.key()} {iter.value()}\")\n    iter.next()\n\n# Read just the first key\niter.seek_to_first();\nprint(f\"{iter.key()} {iter.value()}\")\n\ndel iter, db\nRdict.destroy(path, Options())\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.seek_to_last", "modulename": "speedict", "qualname": "RdictIter.seek_to_last", "kind": "function", "doc": "<p>Seeks to the last key in the database.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, ReadOptions\n\npath = \"_path_for_rocksdb_storage6\"\ndb = Rdict(path, Options())\niter = db.iter(ReadOptions())\n\n# Iterate all keys from the start in lexicographic order\niter.seek_to_last()\n\nwhile iter.valid():\n    print(f\"{iter.key()} {iter.value()}\")\n    iter.prev()\n\n# Read just the last key\niter.seek_to_last();\nprint(f\"{iter.key()} {iter.value()}\")\n\ndel iter, db\nRdict.destroy(path, Options())\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.seek", "modulename": "speedict", "qualname": "RdictIter.seek", "kind": "function", "doc": "<p>Seeks to the specified key or the first key that lexicographically follows it.</p>\n\n<p>This method will attempt to seek to the specified key. If that key does not exist, it will\nfind and seek to the key that lexicographically follows it instead.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, ReadOptions\n\npath = \"_path_for_rocksdb_storage6\"\ndb = Rdict(path, Options())\niter = db.iter(ReadOptions())\n\n# Read the first string key that starts with 'a'\niter.seek(\"a\");\nprint(f\"{iter.key()} {iter.value()}\")\n\ndel iter, db\nRdict.destroy(path, Options())\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.seek_for_prev", "modulename": "speedict", "qualname": "RdictIter.seek_for_prev", "kind": "function", "doc": "<p>Seeks to the specified key, or the first key that lexicographically precedes it.</p>\n\n<p>Like <code>.seek()</code> this method will attempt to seek to the specified key.\nThe difference with <code>.seek()</code> is that if the specified key do not exist, this method will\nseek to key that lexicographically precedes it instead.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Rdict, Options, ReadOptions\n\npath = \"_path_for_rocksdb_storage6\"\ndb = Rdict(path, Options())\niter = db.iter(ReadOptions())\n\n# Read the last key that starts with 'a'\nseek_for_prev(\"b\")\nprint(f\"{iter.key()} {iter.value()}\")\n\ndel iter, db\nRdict.destroy(path, Options())\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.next", "modulename": "speedict", "qualname": "RdictIter.next", "kind": "function", "doc": "<p>Seeks to the next key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.prev", "modulename": "speedict", "qualname": "RdictIter.prev", "kind": "function", "doc": "<p>Seeks to the previous key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.key", "modulename": "speedict", "qualname": "RdictIter.key", "kind": "function", "doc": "<p>Returns the current key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.RdictIter.value", "modulename": "speedict", "qualname": "RdictIter.value", "kind": "function", "doc": "<p>Returns the current value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options", "modulename": "speedict", "qualname": "Options", "kind": "class", "doc": "<p>Database-wide options around performance and behavior.</p>\n\n<p>Please read the official tuning <a href=\"https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide\">guide</a>\nand most importantly, measure performance under realistic workloads with realistic hardware.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, Rdict, DBCompactionStyle\n\ndef badly_tuned_for_somebody_elses_disk():\n\n    path = \"path/for/rocksdb/storageX\"\n\n    opts = Options()\n    opts.create_if_missing(true)\n    opts.set_max_open_files(10000)\n    opts.set_use_fsync(false)\n    opts.set_bytes_per_sync(8388608)\n    opts.optimize_for_point_lookup(1024)\n    opts.set_table_cache_num_shard_bits(6)\n    opts.set_max_write_buffer_number(32)\n    opts.set_write_buffer_size(536870912)\n    opts.set_target_file_size_base(1073741824)\n    opts.set_min_write_buffer_number_to_merge(4)\n    opts.set_level_zero_stop_writes_trigger(2000)\n    opts.set_level_zero_slowdown_writes_trigger(0)\n    opts.set_compaction_style(DBCompactionStyle.universal())\n    opts.set_disable_auto_compactions(true)\n\n    return Rdict(path, opts)\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>raw_mode (bool):</strong>  set this to True to operate in raw mode (i.e.\nit will only allow bytes as key-value pairs, and is compatible\nwith other RockDB database).</li>\n</ul>\n"}, {"fullname": "speedict.Options.__init__", "modulename": "speedict", "qualname": "Options.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.Options.load_latest", "modulename": "speedict", "qualname": "Options.load_latest", "kind": "function", "doc": "<p>Load latest options from the rocksdb path</p>\n\n<p>Returns a tuple, where the first item is <code>Options</code>\nand the second item is a <code>Dict</code> of column families.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">env</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span>, </span><span class=\"param\"><span class=\"n\">ignore_unknown_options</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.increase_parallelism", "modulename": "speedict", "qualname": "Options.increase_parallelism", "kind": "function", "doc": "<p>By default, RocksDB uses only one background thread for flush and\ncompaction. Calling this function will set it up such that total of\n<code>total_threads</code> is used. Good value for <code>total_threads</code> is the number of\ncores. You almost definitely want to call this function if your system is\nbottlenecked by RocksDB.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">parallelism</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.optimize_level_style_compaction", "modulename": "speedict", "qualname": "Options.optimize_level_style_compaction", "kind": "function", "doc": "<p>Optimize level style compaction.</p>\n\n<p>Default values for some parameters in <code>Options</code> are not optimized for heavy\nworkloads and big datasets, which means you might observe write stalls under\nsome conditions.</p>\n\n<p>This can be used as one of the starting points for tuning RocksDB options in\nsuch cases.</p>\n\n<p>Internally, it sets <code>write_buffer_size</code>, <code>min_write_buffer_number_to_merge</code>,\n<code>max_write_buffer_number</code>, <code>level0_file_num_compaction_trigger</code>,\n<code>target_file_size_base</code>, <code>max_bytes_for_level_base</code>, so it can override if those\nparameters were set before.</p>\n\n<p>It sets buffer sizes so that memory consumption would be constrained by\n<code>memtable_memory_budget</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">memtable_memory_budget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.optimize_universal_style_compaction", "modulename": "speedict", "qualname": "Options.optimize_universal_style_compaction", "kind": "function", "doc": "<p>Optimize universal style compaction.</p>\n\n<p>Default values for some parameters in <code>Options</code> are not optimized for heavy\nworkloads and big datasets, which means you might observe write stalls under\nsome conditions.</p>\n\n<p>This can be used as one of the starting points for tuning RocksDB options in\nsuch cases.</p>\n\n<p>Internally, it sets <code>write_buffer_size</code>, <code>min_write_buffer_number_to_merge</code>,\n<code>max_write_buffer_number</code>, <code>level0_file_num_compaction_trigger</code>,\n<code>target_file_size_base</code>, <code>max_bytes_for_level_base</code>, so it can override if those\nparameters were set before.</p>\n\n<p>It sets buffer sizes so that memory consumption would be constrained by\n<code>memtable_memory_budget</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">memtable_memory_budget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.create_if_missing", "modulename": "speedict", "qualname": "Options.create_if_missing", "kind": "function", "doc": "<p>If true, any column families that didn't exist when opening the database\nwill be created.</p>\n\n<p>Default: <code>true</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">create_if_missing</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.create_missing_column_families", "modulename": "speedict", "qualname": "Options.create_missing_column_families", "kind": "function", "doc": "<p>If true, any column families that didn't exist when opening the database\nwill be created.</p>\n\n<p>Default: <code>false</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">create_missing_cfs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_error_if_exists", "modulename": "speedict", "qualname": "Options.set_error_if_exists", "kind": "function", "doc": "<p>Specifies whether an error should be raised if the database already exists.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_paranoid_checks", "modulename": "speedict", "qualname": "Options.set_paranoid_checks", "kind": "function", "doc": "<p>Enable/disable paranoid checks.</p>\n\n<p>If true, the implementation will do aggressive checking of the\ndata it is processing and will stop early if it detects any\nerrors. This may have unforeseen ramifications: for example, a\ncorruption of one DB entry may cause a large number of entries to\nbecome unreadable or for the entire DB to become unopenable.\nIf any of the  writes to the database fails (Put, Delete, Merge, Write),\nthe database will switch to read-only mode and fail all other\nWrite operations.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_db_paths", "modulename": "speedict", "qualname": "Options.set_db_paths", "kind": "function", "doc": "<p>A list of paths where SST files can be put into, with its target size.\nNewer data is placed into paths specified earlier in the vector while\nolder data gradually moves to paths specified later in the vector.</p>\n\n<p>For example, you have a flash device with 10GB allocated for the DB,\nas well as a hard drive of 2TB, you should config it to be:\n  [{\"/flash_path\", 10GB}, {\"/hard_drive\", 2TB}]</p>\n\n<p>The system will try to guarantee data under each path is close to but\nnot larger than the target size. But current and future file sizes used\nby determining where to place a file are based on best-effort estimation,\nwhich means there is a chance that the actual size under the directory\nis slightly more than target size under some workloads. User should give\nsome buffer room for those cases.</p>\n\n<p>If none of the paths has sufficient room to place a file, the file will\nbe placed to the last path anyway, despite to the target size.</p>\n\n<p>Placing newer data to earlier paths is also best-efforts. User should\nexpect user files to be placed in higher levels in some extreme cases.</p>\n\n<p>If left empty, only one path will be used, which is <code>path</code> passed when\nopening the DB.</p>\n\n<p>Default: empty</p>\n\n<pre><code>from speedict import Options, DBPath\n\nopt = Options()\nflash_path = DBPath(\"/flash_path\", 10 * 1024 * 1024 * 1024) # 10 GB\nhard_drive = DBPath(\"/hard_drive\", 2 * 1024 * 1024 * 1024 * 1024) # 2 TB\nopt.set_db_paths([flash_path, hard_drive])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">paths</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_env", "modulename": "speedict", "qualname": "Options.set_env", "kind": "function", "doc": "<p>Use the specified object to interact with the environment,\ne.g. to read/write files, schedule background work, etc. In the near\nfuture, support for doing storage operations such as read/write files\nthrough env will be deprecated in favor of file_system.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_compression_type", "modulename": "speedict", "qualname": "Options.set_compression_type", "kind": "function", "doc": "<p>Sets the compression algorithm that will be used for compressing blocks.</p>\n\n<p>Default: <code>DBCompressionType::Snappy</code> (<code>DBCompressionType::None</code> if\nsnappy feature is not enabled).</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, DBCompressionType\n\nopts = Options()\nopts.set_compression_type(DBCompressionType.snappy())\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_compression_per_level", "modulename": "speedict", "qualname": "Options.set_compression_per_level", "kind": "function", "doc": "<p>Different levels can have different compression policies. There\nare cases where most lower levels would like to use quick compression\nalgorithms while the higher levels (which have more data) use\ncompression algorithms that have better compression but could\nbe slower. This array, if non-empty, should have an entry for\neach level of the database; these override the value specified in\nthe previous field 'compression'.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, DBCompressionType\n\nopts = Options()\nopts.set_compression_per_level([\n    DBCompressionType.none(),\n    DBCompressionType.none(),\n    DBCompressionType.snappy(),\n    DBCompressionType.snappy(),\n    DBCompressionType.snappy()\n])\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">level_types</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_compression_options", "modulename": "speedict", "qualname": "Options.set_compression_options", "kind": "function", "doc": "<p>Maximum size of dictionaries used to prime the compression library.\nEnabling dictionary can improve compression ratios when there are\nrepetitions across data blocks.</p>\n\n<p>The dictionary is created by sampling the SST file data. If\n<code>zstd_max_train_bytes</code> is nonzero, the samples are passed through zstd's\ndictionary generator. Otherwise, the random samples are used directly as\nthe dictionary.</p>\n\n<p>When compression dictionary is disabled, we compress and write each block\nbefore buffering data for the next one. When compression dictionary is\nenabled, we buffer all SST file data in-memory so we can sample it, as data\ncan only be compressed and written after the dictionary has been finalized.\nSo users of this feature may see increased memory usage.</p>\n\n<p>Default: <code>0</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">w_bits</span>, </span><span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">strategy</span>, </span><span class=\"param\"><span class=\"n\">max_dict_bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_zstd_max_train_bytes", "modulename": "speedict", "qualname": "Options.set_zstd_max_train_bytes", "kind": "function", "doc": "<p>Sets maximum size of training data passed to zstd's dictionary trainer. Using zstd's\ndictionary trainer can achieve even better compression ratio improvements than using\n<code>max_dict_bytes</code> alone.</p>\n\n<p>The training data will be used to generate a dictionary of max_dict_bytes.</p>\n\n<p>Default: 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_compaction_readahead_size", "modulename": "speedict", "qualname": "Options.set_compaction_readahead_size", "kind": "function", "doc": "<p>If non-zero, we perform bigger reads when doing compaction. If you're\nrunning RocksDB on spinning disks, you should set this to at least 2MB.\nThat way RocksDB's compaction is doing sequential instead of random reads.</p>\n\n<p>When non-zero, we also force new_table_reader_for_compaction_inputs to\ntrue.</p>\n\n<p>Default: <code>0</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">compaction_readahead_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_level_compaction_dynamic_level_bytes", "modulename": "speedict", "qualname": "Options.set_level_compaction_dynamic_level_bytes", "kind": "function", "doc": "<p>Allow RocksDB to pick dynamic base of bytes for levels.\nWith this feature turned on, RocksDB will automatically adjust max bytes for each level.\nThe goal of this feature is to have lower bound on size amplification.</p>\n\n<p>Default: false.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_prefix_extractor", "modulename": "speedict", "qualname": "Options.set_prefix_extractor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">prefix_extractor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.optimize_for_point_lookup", "modulename": "speedict", "qualname": "Options.optimize_for_point_lookup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">cache_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_optimize_filters_for_hits", "modulename": "speedict", "qualname": "Options.set_optimize_filters_for_hits", "kind": "function", "doc": "<p>Sets the optimize_filters_for_hits flag</p>\n\n<p>Default: <code>false</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">optimize_for_hits</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_delete_obsolete_files_period_micros", "modulename": "speedict", "qualname": "Options.set_delete_obsolete_files_period_micros", "kind": "function", "doc": "<p>Sets the periodicity when obsolete files get deleted.</p>\n\n<p>The files that get out of scope by compaction\nprocess will still get automatically delete on every compaction,\nregardless of this setting.</p>\n\n<p>Default: 6 hours</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">micros</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.prepare_for_bulk_load", "modulename": "speedict", "qualname": "Options.prepare_for_bulk_load", "kind": "function", "doc": "<p>Prepare the DB for bulk loading.</p>\n\n<p>All data will be in level 0 without any automatic compaction.\nIt's recommended to manually call CompactRange(NULL, NULL) before reading\nfrom the database, because otherwise the read can be very slow.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_open_files", "modulename": "speedict", "qualname": "Options.set_max_open_files", "kind": "function", "doc": "<p>Sets the number of open files that can be used by the DB. You may need to\nincrease this if your database has a large working set. Value <code>-1</code> means\nfiles opened are always kept open. You can estimate number of files based\non target_file_size_base and target_file_size_multiplier for level-based\ncompaction. For universal-style compaction, you can usually set it to <code>-1</code>.</p>\n\n<p>Default: <code>-1</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nfiles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_file_opening_threads", "modulename": "speedict", "qualname": "Options.set_max_file_opening_threads", "kind": "function", "doc": "<p>If max_open_files is -1, DB will open all files on DB::Open(). You can\nuse this option to increase the number of threads used to open the files.\nDefault: 16</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nthreads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_use_fsync", "modulename": "speedict", "qualname": "Options.set_use_fsync", "kind": "function", "doc": "<p>If true, then every store to stable storage will issue a fsync.\nIf false, then every store to stable storage will issue a fdatasync.\nThis parameter should be set to true while storing data to\nfilesystem like ext3 that can lose files after a reboot.</p>\n\n<p>Default: <code>false</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">useit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_db_log_dir", "modulename": "speedict", "qualname": "Options.set_db_log_dir", "kind": "function", "doc": "<p>Specifies the absolute info LOG dir.</p>\n\n<p>If it is empty, the log files will be in the same dir as data.\nIf it is non empty, the log files will be in the specified dir,\nand the db data dir's absolute path will be used as the log file\nname's prefix.</p>\n\n<p>Default: empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_bytes_per_sync", "modulename": "speedict", "qualname": "Options.set_bytes_per_sync", "kind": "function", "doc": "<p>Allows OS to incrementally sync files to disk while they are being\nwritten, asynchronously, in the background. This operation can be used\nto smooth out write I/Os over time. Users shouldn't rely on it for\npersistency guarantee.\nIssue one request for every bytes_per_sync written. <code>0</code> turns it off.</p>\n\n<p>Default: <code>0</code></p>\n\n<p>You may consider using rate_limiter to regulate write rate to device.\nWhen rate limiter is enabled, it automatically enables bytes_per_sync\nto 1MB.</p>\n\n<p>This option applies to table files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_wal_bytes_per_sync", "modulename": "speedict", "qualname": "Options.set_wal_bytes_per_sync", "kind": "function", "doc": "<p>Same as bytes_per_sync, but applies to WAL files.</p>\n\n<p>Default: 0, turned off</p>\n\n<p>Dynamically changeable through SetDBOptions() API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_writable_file_max_buffer_size", "modulename": "speedict", "qualname": "Options.set_writable_file_max_buffer_size", "kind": "function", "doc": "<p>Sets the maximum buffer size that is used by WritableFileWriter.</p>\n\n<p>On Windows, we need to maintain an aligned buffer for writes.\nWe allow the buffer to grow until it's size hits the limit in buffered\nIO and fix the buffer size when using direct IO to ensure alignment of\nwrite requests if the logical sector size is unusual</p>\n\n<p>Default: 1024 * 1024 (1 MB)</p>\n\n<p>Dynamically changeable through SetDBOptions() API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_allow_concurrent_memtable_write", "modulename": "speedict", "qualname": "Options.set_allow_concurrent_memtable_write", "kind": "function", "doc": "<p>If true, allow multi-writers to update mem tables in parallel.\nOnly some memtable_factory-s support concurrent writes; currently it\nis implemented only for SkipListFactory.  Concurrent memtable writes\nare not compatible with inplace_update_support or filter_deletes.\nIt is strongly recommended to set enable_write_thread_adaptive_yield\nif you are going to use this feature.</p>\n\n<p>Default: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">allow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_enable_write_thread_adaptive_yield", "modulename": "speedict", "qualname": "Options.set_enable_write_thread_adaptive_yield", "kind": "function", "doc": "<p>If true, threads synchronizing with the write batch group leader will wait for up to\nwrite_thread_max_yield_usec before blocking on a mutex. This can substantially improve\nthroughput for concurrent workloads, regardless of whether allow_concurrent_memtable_write\nis enabled.</p>\n\n<p>Default: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_sequential_skip_in_iterations", "modulename": "speedict", "qualname": "Options.set_max_sequential_skip_in_iterations", "kind": "function", "doc": "<p>Specifies whether an iteration->Next() sequentially skips over keys with the same user-key or not.</p>\n\n<p>This number specifies the number of keys (with the same userkey)\nthat will be sequentially skipped before a reseek is issued.</p>\n\n<p>Default: 8</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_use_direct_reads", "modulename": "speedict", "qualname": "Options.set_use_direct_reads", "kind": "function", "doc": "<p>Enable direct I/O mode for reading\nthey may or may not improve performance depending on the use case</p>\n\n<p>Files will be opened in \"direct I/O\" mode\nwhich means that data read from the disk will not be cached or\nbuffered. The hardware buffer of the devices may however still\nbe used. Memory mapped files are not impacted by these parameters.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_use_direct_io_for_flush_and_compaction", "modulename": "speedict", "qualname": "Options.set_use_direct_io_for_flush_and_compaction", "kind": "function", "doc": "<p>Enable direct I/O mode for flush and compaction</p>\n\n<p>Files will be opened in \"direct I/O\" mode\nwhich means that data written to the disk will not be cached or\nbuffered. The hardware buffer of the devices may however still\nbe used. Memory mapped files are not impacted by these parameters.\nthey may or may not improve performance depending on the use case</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_is_fd_close_on_exec", "modulename": "speedict", "qualname": "Options.set_is_fd_close_on_exec", "kind": "function", "doc": "<p>Enable/dsiable child process inherit open files.</p>\n\n<p>Default: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_table_cache_num_shard_bits", "modulename": "speedict", "qualname": "Options.set_table_cache_num_shard_bits", "kind": "function", "doc": "<p>Sets the number of shards used for table cache.</p>\n\n<p>Default: <code>6</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbits</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_target_file_size_multiplier", "modulename": "speedict", "qualname": "Options.set_target_file_size_multiplier", "kind": "function", "doc": "<p>By default target_file_size_multiplier is 1, which means\nby default files in different levels will have similar size.</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">multiplier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_min_write_buffer_number", "modulename": "speedict", "qualname": "Options.set_min_write_buffer_number", "kind": "function", "doc": "<p>Sets the minimum number of write buffers that will be merged together\nbefore writing to storage.  If set to <code>1</code>, then\nall write buffers are flushed to L0 as individual files and this increases\nread amplification because a get request has to check in all of these\nfiles. Also, an in-memory merge may result in writing lesser\ndata to storage if there are duplicate records in each of these\nindividual write buffers.</p>\n\n<p>Default: <code>1</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbuf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_write_buffer_number", "modulename": "speedict", "qualname": "Options.set_max_write_buffer_number", "kind": "function", "doc": "<p>Sets the maximum number of write buffers that are built up in memory.\nThe default and the minimum number is 2, so that when 1 write buffer\nis being flushed to storage, new writes can continue to the other\nwrite buffer.\nIf max_write_buffer_number &gt; 3, writing will be slowed down to\noptions.delayed_write_rate if we are writing to the last write buffer\nallowed.</p>\n\n<p>Default: <code>2</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbuf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_write_buffer_size", "modulename": "speedict", "qualname": "Options.set_write_buffer_size", "kind": "function", "doc": "<p>Sets the amount of data to build up in memory (backed by an unsorted log\non disk) before converting to a sorted on-disk file.</p>\n\n<p>Larger values increase performance, especially during bulk loads.\nUp to max_write_buffer_number write buffers may be held in memory\nat the same time,\nso you may wish to adjust this parameter to control memory usage.\nAlso, a larger write buffer will result in a longer recovery time\nthe next time the database is opened.</p>\n\n<p>Note that write_buffer_size is enforced per column family.\nSee db_write_buffer_size for sharing memory across column families.</p>\n\n<p>Default: <code>0x4000000</code> (64MiB)</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_db_write_buffer_size", "modulename": "speedict", "qualname": "Options.set_db_write_buffer_size", "kind": "function", "doc": "<p>Amount of data to build up in memtables across all column\nfamilies before writing to disk.</p>\n\n<p>This is distinct from write_buffer_size, which enforces a limit\nfor a single memtable.</p>\n\n<p>This feature is disabled by default. Specify a non-zero value\nto enable it.</p>\n\n<p>Default: 0 (disabled)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_bytes_for_level_base", "modulename": "speedict", "qualname": "Options.set_max_bytes_for_level_base", "kind": "function", "doc": "<p>Control maximum total data size for a level.\nmax_bytes_for_level_base is the max total for level-1.\nMaximum number of bytes for level L can be calculated as\n(max_bytes_for_level_base) * (max_bytes_for_level_multiplier ^ (L-1))\nFor example, if max_bytes_for_level_base is 200MB, and if\nmax_bytes_for_level_multiplier is 10, total data size for level-1\nwill be 200MB, total file size for level-2 will be 2GB,\nand total file size for level-3 will be 20GB.</p>\n\n<p>Default: <code>0x10000000</code> (256MiB).</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_bytes_for_level_multiplier", "modulename": "speedict", "qualname": "Options.set_max_bytes_for_level_multiplier", "kind": "function", "doc": "<p>Default: <code>10</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">mul</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_manifest_file_size", "modulename": "speedict", "qualname": "Options.set_max_manifest_file_size", "kind": "function", "doc": "<p>The manifest file is rolled over on reaching this limit.\nThe older manifest file be deleted.\nThe default value is MAX_INT so that roll-over does not take place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_target_file_size_base", "modulename": "speedict", "qualname": "Options.set_target_file_size_base", "kind": "function", "doc": "<p>Sets the target file size for compaction.\ntarget_file_size_base is per-file size for level-1.\nTarget file size for level L can be calculated by\ntarget_file_size_base * (target_file_size_multiplier ^ (L-1))\nFor example, if target_file_size_base is 2MB and\ntarget_file_size_multiplier is 10, then each file on level-1 will\nbe 2MB, and each file on level 2 will be 20MB,\nand each file on level-3 will be 200MB.</p>\n\n<p>Default: <code>0x4000000</code> (64MiB)</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_min_write_buffer_number_to_merge", "modulename": "speedict", "qualname": "Options.set_min_write_buffer_number_to_merge", "kind": "function", "doc": "<p>Sets the minimum number of write buffers that will be merged together\nbefore writing to storage.  If set to <code>1</code>, then\nall write buffers are flushed to L0 as individual files and this increases\nread amplification because a get request has to check in all of these\nfiles. Also, an in-memory merge may result in writing lesser\ndata to storage if there are duplicate records in each of these\nindividual write buffers.</p>\n\n<p>Default: <code>1</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">to_merge</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_level_zero_file_num_compaction_trigger", "modulename": "speedict", "qualname": "Options.set_level_zero_file_num_compaction_trigger", "kind": "function", "doc": "<p>Sets the number of files to trigger level-0 compaction. A value &lt; <code>0</code> means that\nlevel-0 compaction will not be triggered by number of files at all.</p>\n\n<p>Default: <code>4</code></p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_level_zero_slowdown_writes_trigger", "modulename": "speedict", "qualname": "Options.set_level_zero_slowdown_writes_trigger", "kind": "function", "doc": "<p>Sets the soft limit on number of level-0 files. We start slowing down writes at this\npoint. A value &lt; <code>0</code> means that no writing slow down will be triggered by\nnumber of files in level-0.</p>\n\n<p>Default: <code>20</code></p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_level_zero_stop_writes_trigger", "modulename": "speedict", "qualname": "Options.set_level_zero_stop_writes_trigger", "kind": "function", "doc": "<p>Sets the maximum number of level-0 files.  We stop writes at this point.</p>\n\n<p>Default: <code>24</code></p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_compaction_style", "modulename": "speedict", "qualname": "Options.set_compaction_style", "kind": "function", "doc": "<p>Sets the compaction style.</p>\n\n<p>Default: DBCompactionStyle.level()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">style</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_universal_compaction_options", "modulename": "speedict", "qualname": "Options.set_universal_compaction_options", "kind": "function", "doc": "<p>Sets the options needed to support Universal Style compactions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">uco</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_fifo_compaction_options", "modulename": "speedict", "qualname": "Options.set_fifo_compaction_options", "kind": "function", "doc": "<p>Sets the options for FIFO compaction style.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">fco</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_unordered_write", "modulename": "speedict", "qualname": "Options.set_unordered_write", "kind": "function", "doc": "<p>Sets unordered_write to true trades higher write throughput with\nrelaxing the immutability guarantee of snapshots. This violates the\nrepeatability one expects from ::Get from a snapshot, as well as\n:MultiGet and Iterator's consistent-point-in-time view property.\nIf the application cannot tolerate the relaxed guarantees, it can implement\nits own mechanisms to work around that and yet benefit from the higher\nthroughput. Using TransactionDB with WRITE_PREPARED write policy and\ntwo_write_queues=true is one way to achieve immutable snapshots despite\nunordered_write.</p>\n\n<p>By default, i.e., when it is false, rocksdb does not advance the sequence\nnumber for new snapshots unless all the writes with lower sequence numbers\nare already finished. This provides the immutability that we except from\nsnapshots. Moreover, since Iterator and MultiGet internally depend on\nsnapshots, the snapshot immutability results into Iterator and MultiGet\noffering consistent-point-in-time view. If set to true, although\nRead-Your-Own-Write property is still provided, the snapshot immutability\nproperty is relaxed: the writes issued after the snapshot is obtained (with\nlarger sequence numbers) will be still not visible to the reads from that\nsnapshot, however, there still might be pending writes (with lower sequence\nnumber) that will change the state visible to the snapshot after they are\nlanded to the memtable.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">unordered</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_subcompactions", "modulename": "speedict", "qualname": "Options.set_max_subcompactions", "kind": "function", "doc": "<p>Sets maximum number of threads that will\nconcurrently perform a compaction job by breaking it into multiple,\nsmaller ones that are run simultaneously.</p>\n\n<p>Default: 1 (i.e. no subcompactions)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_background_jobs", "modulename": "speedict", "qualname": "Options.set_max_background_jobs", "kind": "function", "doc": "<p>Sets maximum number of concurrent background jobs\n(compactions and flushes).</p>\n\n<p>Default: 2</p>\n\n<p>Dynamically changeable through SetDBOptions() API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">jobs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_disable_auto_compactions", "modulename": "speedict", "qualname": "Options.set_disable_auto_compactions", "kind": "function", "doc": "<p>Disables automatic compactions. Manual compactions can still\nbe issued on this column family</p>\n\n<p>Default: <code>false</code></p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">disable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_memtable_huge_page_size", "modulename": "speedict", "qualname": "Options.set_memtable_huge_page_size", "kind": "function", "doc": "<p>SetMemtableHugePageSize sets the page size for huge page for\narena used by the memtable.\nIf &lt;=0, it won't allocate from huge page but from malloc.\nUsers are responsible to reserve huge pages for it to be allocated. For\nexample:\n     sysctl -w vm.nr_hugepages=20\nSee linux doc Documentation/vm/hugetlbpage.txt\nIf there isn't enough free huge page available, it will fall back to\nmalloc.</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_successive_merges", "modulename": "speedict", "qualname": "Options.set_max_successive_merges", "kind": "function", "doc": "<p>Sets the maximum number of successive merge operations on a key in the memtable.</p>\n\n<p>When a merge operation is added to the memtable and the maximum number of\nsuccessive merges is reached, the value of the key will be calculated and\ninserted into the memtable instead of the merge operation. This will\nensure that there are never more than max_successive_merges merge\noperations in the memtable.</p>\n\n<p>Default: 0 (disabled)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_bloom_locality", "modulename": "speedict", "qualname": "Options.set_bloom_locality", "kind": "function", "doc": "<p>Control locality of bloom filter probes to improve cache miss rate.\nThis option only applies to memtable prefix bloom and plaintable\nprefix bloom. It essentially limits the max number of cache lines each\nbloom filter check can touch.</p>\n\n<p>This optimization is turned off when set to 0. The number should never\nbe greater than number of probes. This option can boost performance\nfor in-memory workload but should use with care since it can cause\nhigher false positive rate.</p>\n\n<p>Default: 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_inplace_update_support", "modulename": "speedict", "qualname": "Options.set_inplace_update_support", "kind": "function", "doc": "<p>Enable/disable thread-safe inplace updates.</p>\n\n<p>Requires updates if</p>\n\n<ul>\n<li>key exists in current memtable</li>\n<li>new sizeof(new_value) &lt;= sizeof(old_value)</li>\n<li>old_value for that key is a put i.e. kTypeValue</li>\n</ul>\n\n<p>Default: false.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_inplace_update_locks", "modulename": "speedict", "qualname": "Options.set_inplace_update_locks", "kind": "function", "doc": "<p>Sets the number of locks used for inplace update.</p>\n\n<p>Default: 10000 when inplace_update_support = true, otherwise 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_bytes_for_level_multiplier_additional", "modulename": "speedict", "qualname": "Options.set_max_bytes_for_level_multiplier_additional", "kind": "function", "doc": "<p>Different max-size multipliers for different levels.\nThese are multiplied by max_bytes_for_level_multiplier to arrive\nat the max-size of each level.</p>\n\n<p>Default: 1</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">level_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_skip_checking_sst_file_sizes_on_db_open", "modulename": "speedict", "qualname": "Options.set_skip_checking_sst_file_sizes_on_db_open", "kind": "function", "doc": "<p>If true, then DB::Open() will not fetch and check sizes of all sst files.\nThis may significantly speed up startup if there are many sst files,\nespecially when using non-default Env with expensive GetFileSize().\nWe'll still check that all required sst files exist.\nIf paranoid_checks is false, this option is ignored, and sst files are\nnot checked at all.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_write_buffer_size_to_maintain", "modulename": "speedict", "qualname": "Options.set_max_write_buffer_size_to_maintain", "kind": "function", "doc": "<p>The total maximum size(bytes) of write buffers to maintain in memory\nincluding copies of buffers that have already been flushed. This parameter\nonly affects trimming of flushed buffers and does not affect flushing.\nThis controls the maximum amount of write history that will be available\nin memory for conflict checking when Transactions are used. The actual\nsize of write history (flushed Memtables) might be higher than this limit\nif further trimming will reduce write history total size below this\nlimit. For example, if max_write_buffer_size_to_maintain is set to 64MB,\nand there are three flushed Memtables, with sizes of 32MB, 20MB, 20MB.\nBecause trimming the next Memtable of size 20MB will reduce total memory\nusage to 52MB which is below the limit, RocksDB will stop trimming.</p>\n\n<p>When using an OptimisticTransactionDB:\nIf this value is too low, some transactions may fail at commit time due\nto not being able to determine whether there were any write conflicts.</p>\n\n<p>When using a TransactionDB:\nIf Transaction::SetSnapshot is used, TransactionDB will read either\nin-memory write buffers or SST files to do write-conflict checking.\nIncreasing this value can reduce the number of reads to SST files\ndone for conflict detection.</p>\n\n<p>Setting this value to 0 will cause write buffers to be freed immediately\nafter they are flushed. If this value is set to -1,\n'max_write_buffer_number * write_buffer_size' will be used.</p>\n\n<p>Default:\nIf using a TransactionDB/OptimisticTransactionDB, the default value will\nbe set to the value of 'max_write_buffer_number * write_buffer_size'\nif it is not explicitly set by the user.  Otherwise, the default is 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_enable_pipelined_write", "modulename": "speedict", "qualname": "Options.set_enable_pipelined_write", "kind": "function", "doc": "<p>By default, a single write thread queue is maintained. The thread gets\nto the head of the queue becomes write batch group leader and responsible\nfor writing to WAL and memtable for the batch group.</p>\n\n<p>If enable_pipelined_write is true, separate write thread queue is\nmaintained for WAL write and memtable write. A write thread first enter WAL\nwriter queue and then memtable writer queue. Pending thread on the WAL\nwriter queue thus only have to wait for previous writers to finish their\nWAL writing but not the memtable writing. Enabling the feature may improve\nwrite throughput and reduce latency of the prepare phase of two-phase\ncommit.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_memtable_factory", "modulename": "speedict", "qualname": "Options.set_memtable_factory", "kind": "function", "doc": "<p>Defines the underlying memtable implementation.\nSee official <a href=\"https://github.com/facebook/rocksdb/wiki/MemTable\">wiki</a> for more information.\nDefaults to using a skiplist.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, MemtableFactory\nopts = Options()\nfactory = MemtableFactory.hash_skip_list(bucket_count=1_000_000,\n                                         height=4,\n                                         branching_factor=4)\n\nopts.set_allow_concurrent_memtable_write(false)\nopts.set_memtable_factory(factory)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">factory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_block_based_table_factory", "modulename": "speedict", "qualname": "Options.set_block_based_table_factory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">factory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_cuckoo_table_factory", "modulename": "speedict", "qualname": "Options.set_cuckoo_table_factory", "kind": "function", "doc": "<p>Sets the table factory to a CuckooTableFactory (the default table\nfactory is a block-based table factory that provides a default\nimplementation of TableBuilder and TableReader with default\nBlockBasedTableOptions).\nSee official <a href=\"https://github.com/facebook/rocksdb/wiki/CuckooTable-Format\">wiki</a> for more information on this table format.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, CuckooTableOptions\n\nopts = Options()\nfactory_opts = CuckooTableOptions()\nfactory_opts.set_hash_ratio(0.8)\nfactory_opts.set_max_search_depth(20)\nfactory_opts.set_cuckoo_block_size(10)\nfactory_opts.set_identity_as_first_hash(true)\nfactory_opts.set_use_module_hash(false)\n\nopts.set_cuckoo_table_factory(factory_opts)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">factory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_plain_table_factory", "modulename": "speedict", "qualname": "Options.set_plain_table_factory", "kind": "function", "doc": "<p>This is a factory that provides TableFactory objects.\nDefault: a block-based table factory that provides a default\nimplementation of TableBuilder and TableReader with default\nBlockBasedTableOptions.\nSets the factory as plain table.\nSee official <a href=\"https://github.com/facebook/rocksdb/wiki/PlainTable-Format\">wiki</a> for more\ninformation.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options, PlainTableFactoryOptions\n\nopts = Options()\nfactory_opts = PlainTableFactoryOptions()\nfactory_opts.user_key_length = 0\nfactory_opts.bloom_bits_per_key = 20\nfactory_opts.hash_table_ratio = 0.75\nfactory_opts.index_sparseness = 16\n\nopts.set_plain_table_factory(factory_opts)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_min_level_to_compress", "modulename": "speedict", "qualname": "Options.set_min_level_to_compress", "kind": "function", "doc": "<p>Sets the start level to use compression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">lvl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_report_bg_io_stats", "modulename": "speedict", "qualname": "Options.set_report_bg_io_stats", "kind": "function", "doc": "<p>Measure IO stats in compactions and flushes, if <code>true</code>.</p>\n\n<p>Default: <code>false</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_total_wal_size", "modulename": "speedict", "qualname": "Options.set_max_total_wal_size", "kind": "function", "doc": "<p>Once write-ahead logs exceed this size, we will start forcing the flush of\ncolumn families whose memtables are backed by the oldest live WAL file\n(i.e. the ones that are causing all the space amplification).</p>\n\n<p>Default: <code>0</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_wal_recovery_mode", "modulename": "speedict", "qualname": "Options.set_wal_recovery_mode", "kind": "function", "doc": "<p>Recovery mode to control the consistency while replaying WAL.</p>\n\n<p>Default: DBRecoveryMode::PointInTime</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.enable_statistics", "modulename": "speedict", "qualname": "Options.enable_statistics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.get_statistics", "modulename": "speedict", "qualname": "Options.get_statistics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_stats_dump_period_sec", "modulename": "speedict", "qualname": "Options.set_stats_dump_period_sec", "kind": "function", "doc": "<p>If not zero, dump <code>rocksdb.stats</code> to LOG every <code>stats_dump_period_sec</code>.</p>\n\n<p>Default: <code>600</code> (10 mins)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">period</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_stats_persist_period_sec", "modulename": "speedict", "qualname": "Options.set_stats_persist_period_sec", "kind": "function", "doc": "<p>If not zero, dump rocksdb.stats to RocksDB to LOG every <code>stats_persist_period_sec</code>.</p>\n\n<p>Default: <code>600</code> (10 mins)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">period</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_advise_random_on_open", "modulename": "speedict", "qualname": "Options.set_advise_random_on_open", "kind": "function", "doc": "<p>When set to true, reading SST files will opt out of the filesystem's\nreadahead. Setting this to false may improve sequential iteration\nperformance.</p>\n\n<p>Default: <code>true</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">advise</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_use_adaptive_mutex", "modulename": "speedict", "qualname": "Options.set_use_adaptive_mutex", "kind": "function", "doc": "<p>Enable/disable adaptive mutex, which spins in the user space before resorting to kernel.</p>\n\n<p>This could reduce context switch when the mutex is not\nheavily contended. However, if the mutex is hot, we could end up\nwasting spin time.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_num_levels", "modulename": "speedict", "qualname": "Options.set_num_levels", "kind": "function", "doc": "<p>Sets the number of levels for this database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_memtable_prefix_bloom_ratio", "modulename": "speedict", "qualname": "Options.set_memtable_prefix_bloom_ratio", "kind": "function", "doc": "<p>When a <code>prefix_extractor</code> is defined through <code>opts.set_prefix_extractor</code> this\ncreates a prefix bloom filter for each memtable with the size of\n<code>write_buffer_size * memtable_prefix_bloom_ratio</code> (capped at 0.25).</p>\n\n<p>Default: <code>0</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_compaction_bytes", "modulename": "speedict", "qualname": "Options.set_max_compaction_bytes", "kind": "function", "doc": "<p>Sets the maximum number of bytes in all compacted files.\nWe try to limit number of bytes in one compaction to be lower than this\nthreshold. But it's not guaranteed.</p>\n\n<p>Value 0 will be sanitized.</p>\n\n<p>Default: target_file_size_base * 25</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nbytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_wal_dir", "modulename": "speedict", "qualname": "Options.set_wal_dir", "kind": "function", "doc": "<p>Specifies the absolute path of the directory the\nwrite-ahead log (WAL) should be written to.</p>\n\n<p>Default: same directory as the database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_wal_ttl_seconds", "modulename": "speedict", "qualname": "Options.set_wal_ttl_seconds", "kind": "function", "doc": "<p>Sets the WAL ttl in seconds.</p>\n\n<p>The following two options affect how archived logs will be deleted.</p>\n\n<ol>\n<li>If both set to 0, logs will be deleted asap and will not get into\nthe archive.</li>\n<li>If wal_ttl_seconds is 0 and wal_size_limit_mb is not 0,\nWAL files will be checked every 10 min and if total size is greater\nthen wal_size_limit_mb, they will be deleted starting with the\nearliest until size_limit is met. All empty files will be deleted.</li>\n<li>If wal_ttl_seconds is not 0 and wall_size_limit_mb is 0, then\nWAL files will be checked every wal_ttl_seconds / 2 and those that\nare older than wal_ttl_seconds will be deleted.</li>\n<li>If both are not 0, WAL files will be checked every 10 min and both\nchecks will be performed with ttl being first.</li>\n</ol>\n\n<p>Default: 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">secs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_wal_size_limit_mb", "modulename": "speedict", "qualname": "Options.set_wal_size_limit_mb", "kind": "function", "doc": "<p>Sets the WAL size limit in MB.</p>\n\n<p>If total size of WAL files is greater then wal_size_limit_mb,\nthey will be deleted starting with the earliest until size_limit is met.</p>\n\n<p>Default: 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_manifest_preallocation_size", "modulename": "speedict", "qualname": "Options.set_manifest_preallocation_size", "kind": "function", "doc": "<p>Sets the number of bytes to preallocate (via fallocate) the manifest files.</p>\n\n<p>Default is 4MB, which is reasonable to reduce random IO\nas well as prevent overallocation for mounts that preallocate\nlarge amounts of data (such as xfs's allocsize option).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_skip_stats_update_on_db_open", "modulename": "speedict", "qualname": "Options.set_skip_stats_update_on_db_open", "kind": "function", "doc": "<p>If true, then DB::Open() will not update the statistics used to optimize\ncompaction decision by loading table properties from many files.\nTurning off this feature will improve DBOpen time especially in disk environment.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">skip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_keep_log_file_num", "modulename": "speedict", "qualname": "Options.set_keep_log_file_num", "kind": "function", "doc": "<p>Specify the maximal number of info log files to be kept.</p>\n\n<p>Default: 1000</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">nfiles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_allow_mmap_writes", "modulename": "speedict", "qualname": "Options.set_allow_mmap_writes", "kind": "function", "doc": "<p>Allow the OS to mmap file for writing.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">is_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_allow_mmap_reads", "modulename": "speedict", "qualname": "Options.set_allow_mmap_reads", "kind": "function", "doc": "<p>Allow the OS to mmap file for reading sst tables.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">is_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_atomic_flush", "modulename": "speedict", "qualname": "Options.set_atomic_flush", "kind": "function", "doc": "<p>Guarantee that all column families are flushed together atomically.\nThis option applies to both manual flushes (<code>db.flush()</code>) and automatic\nbackground flushes caused when memtables are filled.</p>\n\n<p>Note that this is only useful when the WAL is disabled. When using the\nWAL, writes are always consistent across column families.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">atomic_flush</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_row_cache", "modulename": "speedict", "qualname": "Options.set_row_cache", "kind": "function", "doc": "<p>Sets global cache for table-level rows. Cache must outlive DB instance which uses it.</p>\n\n<p>Default: null (disabled)\nNot supported in ROCKSDB_LITE mode!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_ratelimiter", "modulename": "speedict", "qualname": "Options.set_ratelimiter", "kind": "function", "doc": "<p>Use to control write rate of flush and compaction. Flush has higher\npriority than compaction.\nIf rate limiter is enabled, bytes_per_sync is set to 1MB by default.</p>\n\n<p>Default: disable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">rate_bytes_per_sec</span>, </span><span class=\"param\"><span class=\"n\">refill_period_us</span>, </span><span class=\"param\"><span class=\"n\">fairness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_max_log_file_size", "modulename": "speedict", "qualname": "Options.set_max_log_file_size", "kind": "function", "doc": "<p>Sets the maximal size of the info log file.</p>\n\n<p>If the log file is larger than <code>max_log_file_size</code>, a new info log file\nwill be created. If <code>max_log_file_size</code> is equal to zero, all logs will\nbe written to one log file.</p>\n\n<p>Default: 0</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options\n\noptions = Options()\noptions.set_max_log_file_size(0)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_log_file_time_to_roll", "modulename": "speedict", "qualname": "Options.set_log_file_time_to_roll", "kind": "function", "doc": "<p>Sets the time for the info log file to roll (in seconds).</p>\n\n<p>If specified with non-zero value, log file will be rolled\nif it has been active longer than <code>log_file_time_to_roll</code>.\nDefault: 0 (disabled)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">secs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_recycle_log_file_num", "modulename": "speedict", "qualname": "Options.set_recycle_log_file_num", "kind": "function", "doc": "<p>Controls the recycling of log files.</p>\n\n<p>If non-zero, previously written log files will be reused for new logs,\noverwriting the old data. The value indicates how many such files we will\nkeep around at any point in time for later use. This is more efficient\nbecause the blocks are already allocated and fdatasync does not need to\nupdate the inode after each write.</p>\n\n<p>Default: 0</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import Options\n\noptions = Options()\noptions.set_recycle_log_file_num(5)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_soft_pending_compaction_bytes_limit", "modulename": "speedict", "qualname": "Options.set_soft_pending_compaction_bytes_limit", "kind": "function", "doc": "<p>Sets the threshold at which all writes will be slowed down to at least delayed_write_rate if estimated\nbytes needed to be compaction exceed this threshold.</p>\n\n<p>Default: 64GB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">limit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_hard_pending_compaction_bytes_limit", "modulename": "speedict", "qualname": "Options.set_hard_pending_compaction_bytes_limit", "kind": "function", "doc": "<p>Sets the bytes threshold at which all writes are stopped if estimated bytes needed to be compaction exceed\nthis threshold.</p>\n\n<p>Default: 256GB</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">limit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_arena_block_size", "modulename": "speedict", "qualname": "Options.set_arena_block_size", "kind": "function", "doc": "<p>Sets the size of one block in arena memory allocation.</p>\n\n<p>If &lt;= 0, a proper value is automatically calculated (usually 1/10 of\nwriter_buffer_size).</p>\n\n<p>Default: 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_dump_malloc_stats", "modulename": "speedict", "qualname": "Options.set_dump_malloc_stats", "kind": "function", "doc": "<p>If true, then print malloc stats together with rocksdb.stats when printing to LOG.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Options.set_memtable_whole_key_filtering", "modulename": "speedict", "qualname": "Options.set_memtable_whole_key_filtering", "kind": "function", "doc": "<p>Enable whole key bloom filter in memtable. Note this will only take effect\nif memtable_prefix_bloom_size_ratio is not 0. Enabling whole key filtering\ncan potentially reduce CPU usage for point-look-ups.</p>\n\n<p>Default: false (disable)</p>\n\n<p>Dynamically changeable through SetOptions() API</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">whole_key_filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions", "modulename": "speedict", "qualname": "ReadOptions", "kind": "class", "doc": "<p>ReadOptions allows setting iterator bounds and so on.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>raw_mode (bool):</strong>  this must be the same as <code>Options</code> raw_mode\nargument.</li>\n</ul>\n"}, {"fullname": "speedict.ReadOptions.__init__", "modulename": "speedict", "qualname": "ReadOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.ReadOptions.fill_cache", "modulename": "speedict", "qualname": "ReadOptions.fill_cache", "kind": "function", "doc": "<p>Specify whether the \"data block\"/\"index block\"/\"filter block\"\nread for this iteration should be cached in memory?\nCallers may wish to set this field to false for bulk scans.</p>\n\n<p>Default: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_iterate_upper_bound", "modulename": "speedict", "qualname": "ReadOptions.set_iterate_upper_bound", "kind": "function", "doc": "<p>Sets the upper bound for an iterator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_iterate_lower_bound", "modulename": "speedict", "qualname": "ReadOptions.set_iterate_lower_bound", "kind": "function", "doc": "<p>Sets the lower bound for an iterator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_prefix_same_as_start", "modulename": "speedict", "qualname": "ReadOptions.set_prefix_same_as_start", "kind": "function", "doc": "<p>Enforce that the iterator only iterates over the same\nprefix as the seek.\nThis option is effective only for prefix seeks, i.e. prefix_extractor is\nnon-null for the column family and total_order_seek is false.  Unlike\niterate_upper_bound, prefix_same_as_start only works within a prefix\nbut in both directions.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_total_order_seek", "modulename": "speedict", "qualname": "ReadOptions.set_total_order_seek", "kind": "function", "doc": "<p>Enable a total order seek regardless of index format (e.g. hash index)\nused in the table. Some table format (e.g. plain table) may not support\nthis option.</p>\n\n<p>If true when calling Get(), we also skip prefix bloom when reading from\nblock based table. It provides a way to read existing data after\nchanging implementation of prefix extractor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_max_skippable_internal_keys", "modulename": "speedict", "qualname": "ReadOptions.set_max_skippable_internal_keys", "kind": "function", "doc": "<p>Sets a threshold for the number of keys that can be skipped\nbefore failing an iterator seek as incomplete. The default value of 0 should be used to\nnever fail a request as incomplete, even on skipping too many keys.</p>\n\n<p>Default: 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_background_purge_on_iterator_cleanup", "modulename": "speedict", "qualname": "ReadOptions.set_background_purge_on_iterator_cleanup", "kind": "function", "doc": "<p>If true, when PurgeObsoleteFile is called in CleanupIteratorState, we schedule a background job\nin the flush job queue and delete obsolete files in background.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_ignore_range_deletions", "modulename": "speedict", "qualname": "ReadOptions.set_ignore_range_deletions", "kind": "function", "doc": "<p>If true, keys deleted using the DeleteRange() API will be visible to\nreaders until they are naturally deleted during compaction. This improves\nread performance in DBs with many range deletions.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_verify_checksums", "modulename": "speedict", "qualname": "ReadOptions.set_verify_checksums", "kind": "function", "doc": "<p>If true, all data read from underlying storage will be\nverified against corresponding checksums.</p>\n\n<p>Default: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_readahead_size", "modulename": "speedict", "qualname": "ReadOptions.set_readahead_size", "kind": "function", "doc": "<p>If non-zero, an iterator will create a new table reader which\nperforms reads of the given size. Using a large size (&gt; 2MB) can\nimprove the performance of forward iteration on spinning disks.\nDefault: 0</p>\n\n<p>from speedict import ReadOptions</p>\n\n<p>opts = ReadOptions()\nopts.set_readahead_size(4_194_304) # 4mb</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_tailing", "modulename": "speedict", "qualname": "ReadOptions.set_tailing", "kind": "function", "doc": "<p>If true, create a tailing iterator. Note that tailing iterators\nonly support moving in the forward direction. Iterating in reverse\nor seek_to_last are not supported.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ReadOptions.set_pin_data", "modulename": "speedict", "qualname": "ReadOptions.set_pin_data", "kind": "function", "doc": "<p>Specifies the value of \"pin_data\". If true, it keeps the blocks\nloaded by the iterator pinned in memory as long as the iterator is not deleted,\nIf used when reading from tables created with\nBlockBasedTableOptions::use_delta_encoding = false,\nIterator's property \"rocksdb.iterator.is-key-pinned\" is guaranteed to\nreturn 1.</p>\n\n<p>Default: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ColumnFamily", "modulename": "speedict", "qualname": "ColumnFamily", "kind": "class", "doc": "<p>Column family handle. This can be used in WriteBatch to specify Column Family.</p>\n"}, {"fullname": "speedict.ColumnFamily.__init__", "modulename": "speedict", "qualname": "ColumnFamily.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.IngestExternalFileOptions", "modulename": "speedict", "qualname": "IngestExternalFileOptions", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.IngestExternalFileOptions.__init__", "modulename": "speedict", "qualname": "IngestExternalFileOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.IngestExternalFileOptions.set_move_files", "modulename": "speedict", "qualname": "IngestExternalFileOptions.set_move_files", "kind": "function", "doc": "<p>Can be set to true to move the files instead of copying them.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.IngestExternalFileOptions.set_snapshot_consistency", "modulename": "speedict", "qualname": "IngestExternalFileOptions.set_snapshot_consistency", "kind": "function", "doc": "<p>If set to false, an ingested file keys could appear in existing snapshots\nthat where created before the file was ingested.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.IngestExternalFileOptions.set_allow_global_seqno", "modulename": "speedict", "qualname": "IngestExternalFileOptions.set_allow_global_seqno", "kind": "function", "doc": "<p>If set to false, IngestExternalFile() will fail if the file key range\noverlaps with existing keys or tombstones in the DB.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.IngestExternalFileOptions.set_allow_blocking_flush", "modulename": "speedict", "qualname": "IngestExternalFileOptions.set_allow_blocking_flush", "kind": "function", "doc": "<p>If set to false and the file key range overlaps with the memtable key range\n(memtable flush required), IngestExternalFile will fail.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.IngestExternalFileOptions.set_ingest_behind", "modulename": "speedict", "qualname": "IngestExternalFileOptions.set_ingest_behind", "kind": "function", "doc": "<p>Set to true if you would like duplicate keys in the file being ingested\nto be skipped rather than overwriting existing data under that key.\nUsecase: back-fill of some historical data in the database without\nover-writing existing newer version of data.\nThis option could only be used if the DB has been running\nwith allow_ingest_behind=true since the dawn of time.\nAll files will be ingested at the bottommost level with seqno=0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBPath", "modulename": "speedict", "qualname": "DBPath", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.DBPath.__init__", "modulename": "speedict", "qualname": "DBPath.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.MemtableFactory", "modulename": "speedict", "qualname": "MemtableFactory", "kind": "class", "doc": "<p>Defines the underlying memtable implementation.\nSee official <a href=\"https://github.com/facebook/rocksdb/wiki/MemTable\">wiki</a> for more information.</p>\n"}, {"fullname": "speedict.MemtableFactory.__init__", "modulename": "speedict", "qualname": "MemtableFactory.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.MemtableFactory.vector", "modulename": "speedict", "qualname": "MemtableFactory.vector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.MemtableFactory.hash_skip_list", "modulename": "speedict", "qualname": "MemtableFactory.hash_skip_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bucket_count</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">branching_factor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.MemtableFactory.hash_link_list", "modulename": "speedict", "qualname": "MemtableFactory.hash_link_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bucket_count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions", "modulename": "speedict", "qualname": "BlockBasedOptions", "kind": "class", "doc": "<p>For configuring block-based file storage.</p>\n"}, {"fullname": "speedict.BlockBasedOptions.__init__", "modulename": "speedict", "qualname": "BlockBasedOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.BlockBasedOptions.set_block_size", "modulename": "speedict", "qualname": "BlockBasedOptions.set_block_size", "kind": "function", "doc": "<p>Approximate size of user data packed per block. Note that the\nblock size specified here corresponds to uncompressed data. The\nactual size of the unit read from disk may be smaller if\ncompression is enabled. This parameter can be changed dynamically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_metadata_block_size", "modulename": "speedict", "qualname": "BlockBasedOptions.set_metadata_block_size", "kind": "function", "doc": "<p>Block size for partitioned metadata. Currently applied to indexes when\nkTwoLevelIndexSearch is used and to filters when partition_filters is used.\nNote: Since in the current implementation the filters and index partitions\nare aligned, an index/filter block is created when either index or filter\nblock size reaches the specified limit.</p>\n\n<p>Note: this limit is currently applied to only index blocks; a filter\npartition is cut right after an index block is cut.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_partition_filters", "modulename": "speedict", "qualname": "BlockBasedOptions.set_partition_filters", "kind": "function", "doc": "<p>Note: currently this option requires kTwoLevelIndexSearch to be set as\nwell.</p>\n\n<p>Use partitioned full filters for each SST file. This option is\nincompatible with block-based filters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_block_cache", "modulename": "speedict", "qualname": "BlockBasedOptions.set_block_cache", "kind": "function", "doc": "<p>Sets global cache for blocks (user data is stored in a set of blocks, and\na block is the unit of reading from disk). Cache must outlive DB instance which uses it.</p>\n\n<p>If set, use the specified cache for blocks.\nBy default, rocksdb will automatically create and use an 8MB internal cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.disable_cache", "modulename": "speedict", "qualname": "BlockBasedOptions.disable_cache", "kind": "function", "doc": "<p>Disable block cache</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_bloom_filter", "modulename": "speedict", "qualname": "BlockBasedOptions.set_bloom_filter", "kind": "function", "doc": "<p>Sets the filter policy to reduce disk read</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">bits_per_key</span>, </span><span class=\"param\"><span class=\"n\">block_based</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_cache_index_and_filter_blocks", "modulename": "speedict", "qualname": "BlockBasedOptions.set_cache_index_and_filter_blocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_index_type", "modulename": "speedict", "qualname": "BlockBasedOptions.set_index_type", "kind": "function", "doc": "<p>Defines the index type to be used for SS-table lookups.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import BlockBasedOptions, BlockBasedIndexType, Options\n\nopts = Options()\nblock_opts = BlockBasedOptions()\nblock_opts.set_index_type(BlockBasedIndexType.hash_search())\nopts.set_block_based_table_factory(block_opts)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">index_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_pin_l0_filter_and_index_blocks_in_cache", "modulename": "speedict", "qualname": "BlockBasedOptions.set_pin_l0_filter_and_index_blocks_in_cache", "kind": "function", "doc": "<p>If cache_index_and_filter_blocks is true and the below is true, then\nfilter and index blocks are stored in the cache, but a reference is\nheld in the \"table reader\" object so the blocks are pinned and only\nevicted from cache when the table reader is freed.</p>\n\n<p>Default: false.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_pin_top_level_index_and_filter", "modulename": "speedict", "qualname": "BlockBasedOptions.set_pin_top_level_index_and_filter", "kind": "function", "doc": "<p>If cache_index_and_filter_blocks is true and the below is true, then\nthe top-level index of partitioned filter and index blocks are stored in\nthe cache, but a reference is held in the \"table reader\" object so the\nblocks are pinned and only evicted from cache when the table reader is\nfreed. This is not limited to l0 in LSM tree.</p>\n\n<p>Default: false.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_format_version", "modulename": "speedict", "qualname": "BlockBasedOptions.set_format_version", "kind": "function", "doc": "<p>Format version, reserved for backward compatibility.</p>\n\n<p>See full <a href=\"https://github.com/facebook/rocksdb/blob/f059c7d9b96300091e07429a60f4ad55dac84859/include/rocksdb/table.h#L249-L274\">list</a>\nof the supported versions.</p>\n\n<p>Default: 2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">version</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_block_restart_interval", "modulename": "speedict", "qualname": "BlockBasedOptions.set_block_restart_interval", "kind": "function", "doc": "<p>Number of keys between restart points for delta encoding of keys.\nThis parameter can be changed dynamically. Most clients should\nleave this parameter alone. The minimum value allowed is 1. Any smaller\nvalue will be silently overwritten with 1.</p>\n\n<p>Default: 16.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">interval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_index_block_restart_interval", "modulename": "speedict", "qualname": "BlockBasedOptions.set_index_block_restart_interval", "kind": "function", "doc": "<p>Same as block_restart_interval but used for the index block.\nIf you don't plan to run RocksDB before version 5.16 and you are\nusing <code>index_block_restart_interval</code> &gt; 1, you should\nprobably set the <code>format_version</code> to &gt;= 4 as it would reduce the index size.</p>\n\n<p>Default: 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">interval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_data_block_index_type", "modulename": "speedict", "qualname": "BlockBasedOptions.set_data_block_index_type", "kind": "function", "doc": "<h6 id=\"set-the-data-block-index-type-for-point-lookups\">Set the data block index type for point lookups:</h6>\n\n<blockquote>\n  <p><code>DataBlockIndexType::BinarySearch</code> to use binary search within the data block.\n  <code>DataBlockIndexType::BinaryAndHash</code> to use the data block hash index in combination with\n  the normal binary search.</p>\n</blockquote>\n\n<p>The hash table utilization ratio is adjustable using <a href=\"#method.set_data_block_hash_ratio\"><code>set_data_block_hash_ratio</code></a>, which is\nvalid only when using <code>DataBlockIndexType::BinaryAndHash</code>.</p>\n\n<p>Default: <code>BinarySearch</code></p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>from speedict import BlockBasedOptions, BlockBasedIndexType, Options\n\nopts = Options()\nblock_opts = BlockBasedOptions()\nblock_opts.set_data_block_index_type(DataBlockIndexType.binary_and_hash())\nblock_opts.set_data_block_hash_ratio(0.85)\nopts.set_block_based_table_factory(block_opts)\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">index_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_data_block_hash_ratio", "modulename": "speedict", "qualname": "BlockBasedOptions.set_data_block_hash_ratio", "kind": "function", "doc": "<p>Set the data block hash index utilization ratio.</p>\n\n<p>The smaller the utilization ratio, the less hash collisions happen, and so reduce the risk for a\npoint lookup to fall back to binary search due to the collisions. A small ratio means faster\nlookup at the price of more space overhead.</p>\n\n<p>Default: 0.75</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedOptions.set_checksum_type", "modulename": "speedict", "qualname": "BlockBasedOptions.set_checksum_type", "kind": "function", "doc": "<p>Use the specified checksum type.\nNewly created table files will be protected with this checksum type.\nOld table files will still be readable, even though they have different checksum type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">checksum_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.PlainTableFactoryOptions", "modulename": "speedict", "qualname": "PlainTableFactoryOptions", "kind": "class", "doc": "<p>Used with DBOptions::set_plain_table_factory.\nSee official <a href=\"https://github.com/facebook/rocksdb/wiki/PlainTable-Format\">wiki</a> for more\ninformation.</p>\n\n<h6 id=\"defaults\">Defaults:</h6>\n\n<blockquote>\n  <p>user_key_length: 0 (variable length)\n  bloom_bits_per_key: 10\n  hash_table_ratio: 0.75\n  index_sparseness: 16</p>\n</blockquote>\n"}, {"fullname": "speedict.PlainTableFactoryOptions.__init__", "modulename": "speedict", "qualname": "PlainTableFactoryOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.CuckooTableOptions", "modulename": "speedict", "qualname": "CuckooTableOptions", "kind": "class", "doc": "<p>Configuration of cuckoo-based storage.</p>\n"}, {"fullname": "speedict.CuckooTableOptions.__init__", "modulename": "speedict", "qualname": "CuckooTableOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.CuckooTableOptions.set_hash_ratio", "modulename": "speedict", "qualname": "CuckooTableOptions.set_hash_ratio", "kind": "function", "doc": "<p>Determines the utilization of hash tables. Smaller values\nresult in larger hash tables with fewer collisions.\nDefault: 0.9</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CuckooTableOptions.set_max_search_depth", "modulename": "speedict", "qualname": "CuckooTableOptions.set_max_search_depth", "kind": "function", "doc": "<p>A property used by builder to determine the depth to go to\nto search for a path to displace elements in case of\ncollision. See Builder.MakeSpaceForKey method. Higher\nvalues result in more efficient hash tables with fewer\nlookups but take more time to build.\nDefault: 100</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">depth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CuckooTableOptions.set_cuckoo_block_size", "modulename": "speedict", "qualname": "CuckooTableOptions.set_cuckoo_block_size", "kind": "function", "doc": "<p>In case of collision while inserting, the builder\nattempts to insert in the next cuckoo_block_size\nlocations before skipping over to the next Cuckoo hash\nfunction. This makes lookups more cache friendly in case\nof collisions.\nDefault: 5</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CuckooTableOptions.set_identity_as_first_hash", "modulename": "speedict", "qualname": "CuckooTableOptions.set_identity_as_first_hash", "kind": "function", "doc": "<p>If this option is enabled, user key is treated as uint64_t and its value\nis used as hash value directly. This option changes builder's behavior.\nReader ignore this option and behave according to what specified in\ntable property.\nDefault: false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CuckooTableOptions.set_use_module_hash", "modulename": "speedict", "qualname": "CuckooTableOptions.set_use_module_hash", "kind": "function", "doc": "<p>If this option is set to true, module is used during hash calculation.\nThis often yields better space efficiency at the cost of performance.\nIf this option is set to false, # of entries in table is constrained to\nbe power of two, and bit and is used to calculate hash, which is faster in general.\nDefault: true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.UniversalCompactOptions", "modulename": "speedict", "qualname": "UniversalCompactOptions", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.UniversalCompactOptions.__init__", "modulename": "speedict", "qualname": "UniversalCompactOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.UniversalCompactOptions.max_size_amplification_percent", "modulename": "speedict", "qualname": "UniversalCompactOptions.max_size_amplification_percent", "kind": "variable", "doc": "<p>sets the size amplification.</p>\n\n<p>It is defined as the amount (in percentage) of\nadditional storage needed to store a single byte of data in the database.\nFor example, a size amplification of 2% means that a database that\ncontains 100 bytes of user-data may occupy upto 102 bytes of\nphysical storage. By this definition, a fully compacted database has\na size amplification of 0%. Rocksdb uses the following heuristic\nto calculate size amplification: it assumes that all files excluding\nthe earliest file contribute to the size amplification.</p>\n\n<p>Default: 200, which means that a 100 byte database could require upto 300 bytes of storage.</p>\n"}, {"fullname": "speedict.UniversalCompactOptions.compression_size_percent", "modulename": "speedict", "qualname": "UniversalCompactOptions.compression_size_percent", "kind": "variable", "doc": "<p>Sets the percentage of compression size.</p>\n\n<p>If this option is set to be -1, all the output files\nwill follow compression type specified.</p>\n\n<p>If this option is not negative, we will try to make sure compressed\nsize is just above this value. In normal cases, at least this percentage\nof data will be compressed.\nWhen we are compacting to a new file, here is the criteria whether\nit needs to be compressed: assuming here are the list of files sorted\nby generation time:\n   A1...An B1...Bm C1...Ct\nwhere A1 is the newest and Ct is the oldest, and we are going to compact\nB1...Bm, we calculate the total size of all the files as total_size, as\nwell as  the total size of C1...Ct as total_C, the compaction output file\nwill be compressed iff\n  total_C / total_size &lt; this percentage</p>\n\n<p>Default: -1</p>\n"}, {"fullname": "speedict.UniversalCompactOptions.stop_style", "modulename": "speedict", "qualname": "UniversalCompactOptions.stop_style", "kind": "variable", "doc": "<p>Sets the algorithm used to stop picking files into a single compaction run.</p>\n\n<p>Default: ::Total</p>\n"}, {"fullname": "speedict.UniversalCompactOptions.size_ratio", "modulename": "speedict", "qualname": "UniversalCompactOptions.size_ratio", "kind": "variable", "doc": "<p>Sets the percentage flexibility while comparing file size.\nIf the candidate file(s) size is 1% smaller than the next file's size,\nthen include next file into this candidate set.</p>\n\n<p>Default: 1</p>\n"}, {"fullname": "speedict.UniversalCompactOptions.min_merge_width", "modulename": "speedict", "qualname": "UniversalCompactOptions.min_merge_width", "kind": "variable", "doc": "<p>Sets the minimum number of files in a single compaction run.</p>\n\n<p>Default: 2</p>\n"}, {"fullname": "speedict.UniversalCompactOptions.max_merge_width", "modulename": "speedict", "qualname": "UniversalCompactOptions.max_merge_width", "kind": "variable", "doc": "<p>Sets the maximum number of files in a single compaction run.</p>\n\n<p>Default: UINT_MAX</p>\n"}, {"fullname": "speedict.UniversalCompactionStopStyle", "modulename": "speedict", "qualname": "UniversalCompactionStopStyle", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.UniversalCompactionStopStyle.__init__", "modulename": "speedict", "qualname": "UniversalCompactionStopStyle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.UniversalCompactionStopStyle.similar", "modulename": "speedict", "qualname": "UniversalCompactionStopStyle.similar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.UniversalCompactionStopStyle.total", "modulename": "speedict", "qualname": "UniversalCompactionStopStyle.total", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SliceTransform", "modulename": "speedict", "qualname": "SliceTransform", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.SliceTransform.__init__", "modulename": "speedict", "qualname": "SliceTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.SliceTransform.create_fixed_prefix", "modulename": "speedict", "qualname": "SliceTransform.create_fixed_prefix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">len</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SliceTransform.create_max_len_prefix", "modulename": "speedict", "qualname": "SliceTransform.create_max_len_prefix", "kind": "function", "doc": "<p>prefix max length at <code>len</code>. If key is longer than <code>len</code>,\nthe prefix will have length <code>len</code>, if key is shorter than <code>len</code>,\nthe prefix will have the same length as <code>len</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">len</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.SliceTransform.create_noop", "modulename": "speedict", "qualname": "SliceTransform.create_noop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DataBlockIndexType", "modulename": "speedict", "qualname": "DataBlockIndexType", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.DataBlockIndexType.__init__", "modulename": "speedict", "qualname": "DataBlockIndexType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.DataBlockIndexType.binary_search", "modulename": "speedict", "qualname": "DataBlockIndexType.binary_search", "kind": "function", "doc": "<p>Use binary search when performing point lookup for keys in data blocks.\nThis is the default.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DataBlockIndexType.binary_and_hash", "modulename": "speedict", "qualname": "DataBlockIndexType.binary_and_hash", "kind": "function", "doc": "<p>Appends a compact hash table to the end of the data block for efficient indexing. Backwards\ncompatible with databases created without this feature. Once turned on, existing data will\nbe gradually converted to the hash index format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedIndexType", "modulename": "speedict", "qualname": "BlockBasedIndexType", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.BlockBasedIndexType.__init__", "modulename": "speedict", "qualname": "BlockBasedIndexType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.BlockBasedIndexType.binary_search", "modulename": "speedict", "qualname": "BlockBasedIndexType.binary_search", "kind": "function", "doc": "<p>A space efficient index block that is optimized for\nbinary-search-based index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedIndexType.hash_search", "modulename": "speedict", "qualname": "BlockBasedIndexType.hash_search", "kind": "function", "doc": "<p>The hash index, if enabled, will perform a hash lookup if\na prefix extractor has been provided through Options::set_prefix_extractor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BlockBasedIndexType.two_level_index_search", "modulename": "speedict", "qualname": "BlockBasedIndexType.two_level_index_search", "kind": "function", "doc": "<p>A two-level index implementation. Both levels are binary search indexes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Cache", "modulename": "speedict", "qualname": "Cache", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.Cache.__init__", "modulename": "speedict", "qualname": "Cache.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.Cache.get_usage", "modulename": "speedict", "qualname": "Cache.get_usage", "kind": "function", "doc": "<p>Returns the Cache memory usage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Cache.get_pinned_usage", "modulename": "speedict", "qualname": "Cache.get_pinned_usage", "kind": "function", "doc": "<p>Returns pinned memory usage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Cache.set_capacity", "modulename": "speedict", "qualname": "Cache.set_capacity", "kind": "function", "doc": "<p>Sets cache capacity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">capacity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ChecksumType", "modulename": "speedict", "qualname": "ChecksumType", "kind": "class", "doc": "<p>Used by BlockBasedOptions::set_checksum_type.</p>\n\n<p>Call the corresponding functions of each\nto get one of the following.</p>\n\n<ul>\n<li>NoChecksum</li>\n<li>CRC32c</li>\n<li>XXHash</li>\n<li>XXHash64</li>\n<li>XXH3</li>\n</ul>\n"}, {"fullname": "speedict.ChecksumType.__init__", "modulename": "speedict", "qualname": "ChecksumType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.ChecksumType.no_checksum", "modulename": "speedict", "qualname": "ChecksumType.no_checksum", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ChecksumType.crc32c", "modulename": "speedict", "qualname": "ChecksumType.crc32c", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ChecksumType.xxhash", "modulename": "speedict", "qualname": "ChecksumType.xxhash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ChecksumType.xxhash64", "modulename": "speedict", "qualname": "ChecksumType.xxhash64", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.ChecksumType.xxh3", "modulename": "speedict", "qualname": "ChecksumType.xxh3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompactionStyle", "modulename": "speedict", "qualname": "DBCompactionStyle", "kind": "class", "doc": "<p>This is to be treated as an enum.</p>\n\n<p>Call the corresponding functions of each\nto get one of the following.</p>\n\n<ul>\n<li>Level</li>\n<li>Universal</li>\n<li>Fifo</li>\n</ul>\n\n<p>Below is an example to set compaction style to Fifo.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>opt = Options()\nopt.set_compaction_style(DBCompactionStyle.fifo())\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.DBCompactionStyle.__init__", "modulename": "speedict", "qualname": "DBCompactionStyle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.DBCompactionStyle.level", "modulename": "speedict", "qualname": "DBCompactionStyle.level", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompactionStyle.universal", "modulename": "speedict", "qualname": "DBCompactionStyle.universal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompactionStyle.fifo", "modulename": "speedict", "qualname": "DBCompactionStyle.fifo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType", "modulename": "speedict", "qualname": "DBCompressionType", "kind": "class", "doc": "<p>This is to be treated as an enum.</p>\n\n<p>Call the corresponding functions of each\nto get one of the following.</p>\n\n<ul>\n<li>None</li>\n<li>Snappy</li>\n<li>Zlib</li>\n<li>Bz2</li>\n<li>Lz4</li>\n<li>Lz4hc</li>\n<li>Zstd</li>\n</ul>\n\n<p>Below is an example to set compression type to Snappy.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>opt = Options()\nopt.set_compression_type(DBCompressionType.snappy())\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.DBCompressionType.__init__", "modulename": "speedict", "qualname": "DBCompressionType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.DBCompressionType.none", "modulename": "speedict", "qualname": "DBCompressionType.none", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.snappy", "modulename": "speedict", "qualname": "DBCompressionType.snappy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.zlib", "modulename": "speedict", "qualname": "DBCompressionType.zlib", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.bz2", "modulename": "speedict", "qualname": "DBCompressionType.bz2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.lz4", "modulename": "speedict", "qualname": "DBCompressionType.lz4", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.lz4hc", "modulename": "speedict", "qualname": "DBCompressionType.lz4hc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBCompressionType.zstd", "modulename": "speedict", "qualname": "DBCompressionType.zstd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBRecoveryMode", "modulename": "speedict", "qualname": "DBRecoveryMode", "kind": "class", "doc": "<p>This is to be treated as an enum.</p>\n\n<p>Calling the corresponding functions of each\nto get one of the following.</p>\n\n<ul>\n<li>TolerateCorruptedTailRecords</li>\n<li>AbsoluteConsistency</li>\n<li>PointInTime</li>\n<li>SkipAnyCorruptedRecord</li>\n</ul>\n\n<p>Below is an example to set recovery mode to PointInTime.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>::</p>\n\n<pre><code>opt = Options()\nopt.set_wal_recovery_mode(DBRecoveryMode.point_in_time())\n</code></pre>\n</blockquote>\n"}, {"fullname": "speedict.DBRecoveryMode.__init__", "modulename": "speedict", "qualname": "DBRecoveryMode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.DBRecoveryMode.tolerate_corrupted_tail_records", "modulename": "speedict", "qualname": "DBRecoveryMode.tolerate_corrupted_tail_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBRecoveryMode.absolute_consistency", "modulename": "speedict", "qualname": "DBRecoveryMode.absolute_consistency", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBRecoveryMode.point_in_time", "modulename": "speedict", "qualname": "DBRecoveryMode.point_in_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.DBRecoveryMode.skip_any_corrupted_record", "modulename": "speedict", "qualname": "DBRecoveryMode.skip_any_corrupted_record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env", "modulename": "speedict", "qualname": "Env", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.Env.__init__", "modulename": "speedict", "qualname": "Env.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.Env.mem_env", "modulename": "speedict", "qualname": "Env.mem_env", "kind": "function", "doc": "<p>Returns a new environment that stores its data in memory and delegates\nall non-file-storage tasks to base_env.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.set_background_threads", "modulename": "speedict", "qualname": "Env.set_background_threads", "kind": "function", "doc": "<p>Sets the number of background worker threads of a specific thread pool for this environment.\n<code>LOW</code> is the default pool.</p>\n\n<p>Default: 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.set_high_priority_background_threads", "modulename": "speedict", "qualname": "Env.set_high_priority_background_threads", "kind": "function", "doc": "<p>Sets the size of the high priority thread pool that can be used to\nprevent compactions from stalling memtable flushes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.set_low_priority_background_threads", "modulename": "speedict", "qualname": "Env.set_low_priority_background_threads", "kind": "function", "doc": "<p>Sets the size of the low priority thread pool that can be used to\nprevent compactions from stalling memtable flushes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.set_bottom_priority_background_threads", "modulename": "speedict", "qualname": "Env.set_bottom_priority_background_threads", "kind": "function", "doc": "<p>Sets the size of the bottom priority thread pool that can be used to\nprevent compactions from stalling memtable flushes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.join_all_threads", "modulename": "speedict", "qualname": "Env.join_all_threads", "kind": "function", "doc": "<p>Wait for all threads started by StartThread to terminate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.lower_thread_pool_io_priority", "modulename": "speedict", "qualname": "Env.lower_thread_pool_io_priority", "kind": "function", "doc": "<p>Lowering IO priority for threads from the specified pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.lower_high_priority_thread_pool_io_priority", "modulename": "speedict", "qualname": "Env.lower_high_priority_thread_pool_io_priority", "kind": "function", "doc": "<p>Lowering IO priority for high priority thread pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.lower_thread_pool_cpu_priority", "modulename": "speedict", "qualname": "Env.lower_thread_pool_cpu_priority", "kind": "function", "doc": "<p>Lowering CPU priority for threads from the specified pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.Env.lower_high_priority_thread_pool_cpu_priority", "modulename": "speedict", "qualname": "Env.lower_high_priority_thread_pool_cpu_priority", "kind": "function", "doc": "<p>Lowering CPU priority for high priority thread pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.FifoCompactOptions", "modulename": "speedict", "qualname": "FifoCompactOptions", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.FifoCompactOptions.__init__", "modulename": "speedict", "qualname": "FifoCompactOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.FifoCompactOptions.max_table_files_size", "modulename": "speedict", "qualname": "FifoCompactOptions.max_table_files_size", "kind": "variable", "doc": "<p>Sets the max table file size.</p>\n\n<p>Once the total sum of table files reaches this, we will delete the oldest\ntable file</p>\n\n<p>Default: 1GB</p>\n"}, {"fullname": "speedict.CompactOptions", "modulename": "speedict", "qualname": "CompactOptions", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.CompactOptions.__init__", "modulename": "speedict", "qualname": "CompactOptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.CompactOptions.set_exclusive_manual_compaction", "modulename": "speedict", "qualname": "CompactOptions.set_exclusive_manual_compaction", "kind": "function", "doc": "<p>If more than one thread calls manual compaction,\nonly one will actually schedule it while the other threads will simply wait\nfor the scheduled manual compaction to complete. If exclusive_manual_compaction\nis set to true, the call will disable scheduling of automatic compaction jobs\nand wait for existing automatic compaction jobs to finish.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CompactOptions.set_bottommost_level_compaction", "modulename": "speedict", "qualname": "CompactOptions.set_bottommost_level_compaction", "kind": "function", "doc": "<p>Sets bottommost level compaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">lvl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CompactOptions.set_change_level", "modulename": "speedict", "qualname": "CompactOptions.set_change_level", "kind": "function", "doc": "<p>If true, compacted files will be moved to the minimum level capable\nof holding the data or given level (specified non-negative target_level).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.CompactOptions.set_target_level", "modulename": "speedict", "qualname": "CompactOptions.set_target_level", "kind": "function", "doc": "<p>If change_level is true and target_level have non-negative value, compacted\nfiles will be moved to target_level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">lvl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BottommostLevelCompaction", "modulename": "speedict", "qualname": "BottommostLevelCompaction", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "speedict.BottommostLevelCompaction.__init__", "modulename": "speedict", "qualname": "BottommostLevelCompaction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "speedict.BottommostLevelCompaction.skip", "modulename": "speedict", "qualname": "BottommostLevelCompaction.skip", "kind": "function", "doc": "<p>Skip bottommost level compaction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BottommostLevelCompaction.if_have_compaction_filter", "modulename": "speedict", "qualname": "BottommostLevelCompaction.if_have_compaction_filter", "kind": "function", "doc": "<p>Only compact bottommost level if there is a compaction filter\nThis is the default option</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BottommostLevelCompaction.force", "modulename": "speedict", "qualname": "BottommostLevelCompaction.force", "kind": "function", "doc": "<p>Always compact bottommost level</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "speedict.BottommostLevelCompaction.force_optimized", "modulename": "speedict", "qualname": "BottommostLevelCompaction.force_optimized", "kind": "function", "doc": "<p>Always compact bottommost level but in bottommost level avoid\ndouble-compacting files created in the same compaction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();